<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link href="/css/output.css" rel="stylesheet" />

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect" />
    <link crossorigin="" href="https://fonts.gstatic.com" rel="preconnect" />
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;700;800&display=swap"
      rel="stylesheet"
    />

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
      rel="stylesheet"
    />

    <!-- Custom styles for animations and effects -->
    <style>
      .group:hover .group-hover-animate {
        transform: translateY(-4px);
      }

      @keyframes fadeInDown {
        from {
          opacity: 0;
          transform: translateY(-30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .animate-fade-in-down {
        animation: fadeInDown 0.8s ease-out;
      }

      .animate-fade-in-up {
        animation: fadeInUp 0.8s ease-out;
      }

      .animate-fade-in {
        animation: fadeInUp 0.6s ease-out;
      }

      /* Timeline styles */
      .timeline-decorator::before {
        content: "";
        position: absolute;
        top: 1.75rem;
        left: 1.125rem;
        bottom: 0;
        width: 2px;
        background-color: #e3e8e5;
      }

      .dark .timeline-decorator::before {
        background-color: #233729;
      }

      .timeline-item:last-child .timeline-decorator::before {
        display: none;
      }

      .icon-circle {
        width: 2.25rem;
        height: 2.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 9999px;
        z-index: 10;
      }

      /* Custom color variables for light/dark mode */
      :root {
        --primary: #38e07b;
        --background-light: #f6f8f7;
        --background-dark: #122017;
        --foreground-light: #111714;
        --foreground-dark: #e3e8e5;
        --card-light: #ffffff;
        --card-dark: #1a2c21;
        --subtle-light: #f0f4f2;
        --subtle-dark: #233729;
        --subtle-foreground-light: #648772;
        --subtle-foreground-dark: #92bda4;
      }

      /* Hide all navigation elements for minimal layout */
      header, nav, .navbar, footer, aside, .sidebar, #sidebar {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
      }

      /* Ensure main content takes full screen */
      main, .main-content {
        margin: 0 !important;
        padding: 0 !important;
        width: 100% !important;
        height: 100vh !important;
        overflow: auto !important;
      }

      /* Remove any default margins/padding */
      body {
        margin: 0 !important;
        padding: 0 !important;
        height: 100vh !important;
        overflow: hidden !important;
      }

      /* Ensure content area takes full space */
      .content-area, .container, .main-container {
        margin: 0 !important;
        padding: 0 !important;
        width: 100% !important;
        height: 100% !important;
        max-width: none !important;
      }
    </style>
  </head>
  <body
    class="bg-background-light dark:bg-background-dark font-display text-foreground-light dark:text-foreground-dark min-h-screen"
  >
    <!-- Main Content - Full Screen -->
    <main class="w-full h-screen overflow-auto">
      <%- body %>
    </main>

    <!-- Global scripts -->
    <script src="/js/main.js" defer></script>
    <script src="/js/music.js" defer></script>
    <script src="/js/drawing.js" defer></script>
    <script src="/js/account.js" defer></script>
    <script src="/js/panic.js" defer></script>

    <!-- Global session management -->
    <script>
      // Global session validation function
      async function validateSession() {
        try {
          const response = await fetch("/api/session/validate", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const data = await response.json();
            return data.success;
          } else {
            return false;
          }
        } catch (error) {
          console.error("Error validating session:", error);
          return false;
        }
      }

      // Global function to handle session expiry
      async function handleSessionExpiry() {
        // Clear any existing user data
        localStorage.removeItem("user");
        sessionStorage.clear();

        // Show user-friendly message
        const message =
          "Your session has expired. Please login again to continue.";

        // Check if we're on a page that needs authentication
        if (
          document.querySelector("[data-user-authenticated]")?.dataset
            .userAuthenticated === "true"
        ) {
          alert(message);
          window.location.href = "/login";
        } else {
          // Show a subtle notification for non-critical pages
          console.warn("Session expired:", message);
        }
      }

      // Global error handler for fetch requests
      window.addEventListener("unhandledrejection", async function (event) {
        if (
          event.reason &&
          event.reason.message &&
          event.reason.message.includes("401")
        ) {
          console.error("Authentication error detected:", event.reason);
          await handleSessionExpiry();
        }
      });

      // Periodic session check (every 5 minutes)
      setInterval(async function () {
        if (
          document.querySelector("[data-user-authenticated]")?.dataset
            .userAuthenticated === "true"
        ) {
          const isValid = await validateSession();
          if (!isValid) {
            console.warn("Session validation failed during periodic check");
            await handleSessionExpiry();
          }
        }
      }, 5 * 60 * 1000); // 5 minutes
    </script>
  </body>
</html>