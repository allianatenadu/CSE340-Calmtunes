<div class="flex-1 p-4 md:p-8" data-user-authenticated="<%= user ? 'true' : 'false' %>">
  <%
    // Filter out the user's assigned therapist to prevent duplication
    const availableTherapists = userTherapist ?
      approvedTherapists.filter(therapist => therapist.id !== userTherapist.therapist_id) :
      approvedTherapists;
  %>
  <div class="max-w-7xl mx-auto">
  <!-- Header -->
  <div class="flex flex-wrap justify-between gap-3 p-4 mb-6">
    <div class="flex min-w-72 flex-col gap-3">
      <p class="text-[#111718] tracking-light text-[32px] font-bold leading-tight">Find a Therapist</p>
      <p class="text-[#618389] text-sm font-normal leading-normal">Browse our network of licensed therapists to find the right fit for you.</p>
    </div>

    <!-- My Therapist Button - Only show if user has an assigned therapist -->
    <% if (userTherapist) { %>
    <div class="flex items-center gap-3">
      <div class="bg-white border border-gray-200 rounded-lg p-3 shadow-sm">
        <div class="flex items-center gap-3">
          <div class="flex-shrink-0 relative">
            <%
              // Clean therapist image URL
              let hasTherapistImage = false;
              let therapistImageUrl = null;

              if (userTherapist.therapist_image &&
                  userTherapist.therapist_image.trim() !== '' &&
                  userTherapist.therapist_image !== 'null' &&
                  userTherapist.therapist_image !== 'undefined') {
                hasTherapistImage = true;
                therapistImageUrl = userTherapist.therapist_image.startsWith('/') ?
                  userTherapist.therapist_image : `/uploads/${userTherapist.therapist_image}`;
              }
            %>

            <!-- Actual Image (Show the specific image that exists) -->
            <img
              src="/uploads/profiles/optimized_user_3_1760143083316.png"
              alt="<%= userTherapist.therapist_name %>"
              class="w-10 h-10 rounded-full object-cover"
              onload="this.style.display='block';"
              onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
            />

            <!-- Fallback to default image if the specific image fails -->
            <img
              id="my-therapist-img"
              src="/images/default-image.jpg"
              alt="<%= userTherapist.therapist_name %>"
              class="w-10 h-10 rounded-full object-cover hidden"
              style="display: none;"
            />
          </div>
          <div class="flex flex-col">
            <p class="text-sm font-semibold text-gray-900">My Therapist</p>
            <p class="text-xs text-gray-600"><%= userTherapist.therapist_name %></p>
          </div>
          <div class="flex gap-2 ml-2">
            <button
              onclick="startChatWithTherapist('<%= userTherapist.therapist_id %>', '<%= userTherapist.therapist_name %>')"
              class="flex items-center justify-center w-8 h-8 rounded-full bg-primary text-white hover:bg-primary/90 transition-colors"
              title="Chat with therapist"
            >
              <i class="fas fa-comments text-xs"></i>
            </button>
            <button
              onclick="bookSessionWithTherapist('<%= userTherapist.therapist_id %>', '<%= userTherapist.therapist_name %>')"
              class="flex items-center justify-center w-8 h-8 rounded-full bg-secondary text-white hover:bg-secondary/90 transition-colors"
              title="Book session"
            >
              <i class="fas fa-calendar-plus text-xs"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
    <% } %>
  </div>

  <!-- Search and Filters -->
  <div class="px-4 py-3 mb-6">
    <label class="flex flex-col min-w-40 h-12 w-full">
      <div class="flex w-full flex-1 items-stretch rounded-xl h-full">
        <div class="text-[#618389] flex border-none bg-[#f0f4f4] items-center justify-center pl-4 rounded-l-xl border-r-0">
          <i class="fas fa-search"></i>
        </div>
        <input
          type="text"
          placeholder="Search by name or specialization"
          class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-[#111718] focus:outline-0 focus:ring-0 border-none bg-[#f0f4f4] focus:border-none h-full placeholder:text-[#618389] px-4 rounded-l-none border-l-0 pl-2 text-base font-normal leading-normal"
          id="therapist-search"
        />
      </div>
    </label>
  </div>

  <div class="flex gap-3 p-3 flex-wrap pr-4 mb-6">
    <button class="flex h-8 shrink-0 items-center justify-center gap-x-2 rounded-xl bg-[#f0f4f4] pl-4 pr-2 filter-btn" data-filter="specialization">
      <p class="text-[#111718] text-sm font-medium leading-normal">Specialization</p>
      <i class="fas fa-chevron-down text-[#111718]"></i>
    </button>
    <button class="flex h-8 shrink-0 items-center justify-center gap-x-2 rounded-xl bg-[#f0f4f4] pl-4 pr-2 filter-btn" data-filter="gender">
      <p class="text-[#111718] text-sm font-medium leading-normal">Gender</p>
      <i class="fas fa-chevron-down text-[#111718]"></i>
    </button>
    <button class="flex h-8 shrink-0 items-center justify-center gap-x-2 rounded-xl bg-[#f0f4f4] pl-4 pr-2 filter-btn" data-filter="availability">
      <p class="text-[#111718] text-sm font-medium leading-normal">Availability</p>
      <i class="fas fa-chevron-down text-[#111718]"></i>
    </button>
  </div>

  <!-- Therapist Directory -->
  <div class="mb-12">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-2xl font-bold text-textMain">Available Therapists</h2>
      <div class="text-sm text-gray-600">
        <span id="therapist-count"><%= availableTherapists.length %></span>
        therapists available
      </div>
    </div>

    <div class="space-y-4" id="therapists-grid">
      <% if (approvedTherapists && approvedTherapists.length > 0) { %>
        <% availableTherapists.forEach(therapist => { %>
        <div
          class="therapist-card flex items-stretch justify-between gap-4 rounded-xl p-4"
          data-specialty="<%= therapist.specialty %>"
          data-experience="<%= therapist.experience %>"
          data-name="<%= therapist.name.toLowerCase() %>"
          data-therapist-id="<%= therapist.id %>"
          data-bio="<%= (therapist.bio || 'No bio available').replace(/'/g, "\\'").replace(/"/g, '"') %>"
          data-therapist-name="<%= therapist.name %>"
        >
          <div class="flex flex-[2_2_0px] flex-col gap-4">
            <div class="flex flex-col gap-1">
              <p class="text-[#111718] text-base font-bold leading-tight"><%= therapist.name %></p>
              <p class="text-[#618389] text-sm font-normal leading-normal">
                <%= therapist.specialty ? therapist.specialty.replace('-', ' & ').replace(/\b\w/g, l => l.toUpperCase()) : 'General Practice' %>. <%= therapist.bio ? therapist.bio.substring(0, 100) + '...' : 'Experienced mental health professional dedicated to helping clients achieve their wellness goals.' %>
              </p>
            </div>
            <div class="flex gap-3">
              <% if (user) { %>
              <button
                onclick="viewTherapistProfile('<%= therapist.id %>')"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 flex-row-reverse bg-[#f0f4f4] text-[#111718] text-sm font-medium leading-normal w-fit"
              >
                <span class="truncate">View Profile</span>
              </button>
              <button
                onclick="startVideoCall('<%= therapist.id %>', '<%= therapist.name %>')"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 flex-row-reverse bg-green-500 text-white text-sm font-medium leading-normal w-fit hover:bg-green-600 transition-colors"
                title="Start video call"
              >
                <i class="fas fa-video mr-2"></i>
                <span class="truncate">Video Call</span>
              </button>
              <% } else { %>
              <a
                href="/login"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-xl h-8 px-4 flex-row-reverse bg-[#f0f4f4] text-[#111718] text-sm font-medium leading-normal w-fit"
              >
                <span class="truncate">Login to View</span>
              </a>
              <% } %>
            </div>
          </div>
          <!-- THERAPIST IMAGE SECTION - SMART FALLBACK -->
          <div class="w-full bg-center bg-no-repeat aspect-video bg-cover rounded-xl flex-1 relative overflow-hidden">
            <%
              // Check if therapist has uploaded a profile image
              let therapistProfileImage = therapist.profile_image || therapist.user_profile_image;
              let hasTherapistImage = false;
              let therapistImageUrl = null;

              if (therapistProfileImage &&
                  typeof therapistProfileImage === 'string' &&
                  therapistProfileImage.trim() !== '' &&
                  therapistProfileImage.toLowerCase() !== 'null' &&
                  therapistProfileImage.toLowerCase() !== 'undefined') {
                hasTherapistImage = true;
                therapistImageUrl = therapistProfileImage.startsWith('/') ?
                  therapistProfileImage : `/uploads/profiles/${therapistProfileImage}`;
              }
            %>

            <!-- Default Image (Shows when no profile image uploaded) -->
            <img
              id="therapist-default-<%= therapist.id %>"
              src="/images/default-image.jpg"
              alt="<%= therapist.name %>"
              class="w-full h-full object-cover rounded-xl absolute inset-0 <%= hasTherapistImage ? 'hidden' : '' %>"
              style="z-index: 1;"
            />

            <!-- Actual Profile Image (Only shows if therapist uploaded one) -->
            <% if (hasTherapistImage && therapistImageUrl) { %>
            <img
              src="<%= therapistImageUrl %>"
              alt="<%= therapist.name %>"
              class="w-full h-full object-cover rounded-xl absolute inset-0"
              onload="this.style.display='block'; this.style.zIndex='2'; document.getElementById('therapist-default-<%= therapist.id %>').style.display='none';"
              onerror="this.style.display='none'; document.getElementById('therapist-default-<%= therapist.id %>').style.display='block';"
              style="display: none; z-index: 2;"
            />
            <% } %>
          </div>
        </div>
        <% }) %>
      <% } else { %>
      <div class="col-span-full text-center py-12">
        <div
          class="w-24 h-24 bg-gray-100 rounded-full mx-auto mb-6 flex items-center justify-center"
        >
          <i class="fas fa-user-md text-3xl text-gray-400"></i>
        </div>
        <h3 class="text-xl font-medium text-gray-600 mb-2">
          No Approved Therapists Yet
        </h3>
        <p class="text-gray-500">
          We're currently reviewing therapist applications. Check back soon!
        </p>
      </div>
      <% } %>
    </div>
  </div>

  <!-- Video Call Modal -->
  <div
    id="video-call-modal"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden"
    style="display: none;"
  >
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-xl w-full max-w-4xl p-6 relative">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-semibold" id="call-title">Video Call</h3>
          <button
            onclick="endVideoCall()"
            class="text-red-500 hover:text-red-700 text-2xl"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>

        <div class="flex flex-col md:flex-row gap-4 h-96 md:h-80">
          <!-- Local Video -->
          <div class="flex-1 bg-gray-900 rounded-lg relative">
            <video
              id="local-video"
              class="w-full h-full object-cover rounded-lg"
              autoplay
              muted
              playsinline
            ></video>
            <div class="absolute bottom-2 left-2 text-white text-sm bg-black bg-opacity-50 px-2 py-1 rounded">
              You
            </div>
          </div>

          <!-- Remote Video -->
          <div class="flex-1 bg-gray-900 rounded-lg relative">
            <video
              id="remote-video"
              class="w-full h-full object-cover rounded-lg"
              autoplay
              playsinline
            ></video>
            <div class="absolute bottom-2 left-2 text-white text-sm bg-black bg-opacity-50 px-2 py-1 rounded" id="remote-name">
              Therapist
            </div>
          </div>
        </div>

        <!-- Call Controls -->
        <div class="flex items-center justify-center gap-4 mt-4">
          <button
            id="mute-btn"
            onclick="toggleMute()"
            class="flex items-center justify-center w-12 h-12 rounded-full bg-gray-600 text-white hover:bg-gray-700 transition-colors"
            title="Mute/Unmute"
          >
            <i class="fas fa-microphone"></i>
          </button>

          <button
            id="video-btn"
            onclick="toggleVideo()"
            class="flex items-center justify-center w-12 h-12 rounded-full bg-gray-600 text-white hover:bg-gray-700 transition-colors"
            title="Turn camera on/off"
          >
            <i class="fas fa-video"></i>
          </button>

          <button
            onclick="endVideoCall()"
            class="flex items-center justify-center w-16 h-16 rounded-full bg-red-500 text-white hover:bg-red-600 transition-colors text-xl"
            title="End call"
          >
            <i class="fas fa-phone"></i>
          </button>
        </div>

        <!-- Call Status -->
        <div class="text-center mt-4">
          <p id="call-status" class="text-sm text-gray-600">Connecting...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Booking Modal -->
  <div
    id="booking-modal"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden"
    style="display: none;"
  >
    <div class="bg-white rounded-xl max-w-md w-full p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-xl font-semibold">Book Appointment</h3>
        <button
          onclick="closeBookingModal()"
          class="text-gray-500 hover:text-gray-700"
        >
          <i class="fas fa-times"></i>
        </button>
      </div>

      <form id="appointment-form">
        <input type="hidden" id="therapist-id" value="" />
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium mb-2">Preferred Date</label>
            <input
              type="date"
              id="appointment-date"
              class="form-input"
              required
            />
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Preferred Time</label>
            <select id="appointment-time" class="form-input" required>
              <option value="">Select time</option>
              <option value="09:00">9:00 AM</option>
              <option value="10:00">10:00 AM</option>
              <option value="11:00">11:00 AM</option>
              <option value="14:00">2:00 PM</option>
              <option value="15:00">3:00 PM</option>
              <option value="16:00">4:00 PM</option>
              <option value="17:00">5:00 PM</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Session Type</label>
            <select id="session-type" class="form-input" required>
              <option value="">Select session type</option>
              <option value="video">Video Call</option>
              <option value="phone">Phone Call</option>
              <option value="in-person">In-Person</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2"
              >Notes (Optional)</label
            >
            <textarea
              id="appointment-notes"
              class="form-input"
              rows="3"
              placeholder="Any specific concerns or preferences..."
            ></textarea>
          </div>
        </div>

        <div class="flex space-x-3 mt-6">
          <button
            type="button"
            onclick="closeBookingModal()"
            class="btn-secondary flex-1"
          >
            Cancel
          </button>
          <button type="submit" class="btn-primary flex-1">
            Book Appointment
          </button>
        </div>
      </form>
    </div>

    <!-- Pagination -->
    <div class="flex items-center justify-center p-4">
      <a href="#" class="flex size-10 items-center justify-center">
        <i class="fas fa-chevron-left text-[#111718]"></i>
      </a>
      <a class="text-sm font-bold leading-normal tracking-[0.015em] flex size-10 items-center justify-center text-[#111718] rounded-full bg-[#f0f4f4]" href="#">1</a>
      <a class="text-sm font-normal leading-normal flex size-10 items-center justify-center text-[#111718] rounded-full" href="#">2</a>
      <a class="text-sm font-normal leading-normal flex size-10 items-center justify-center text-[#111718] rounded-full" href="#">3</a>
      <span class="text-sm font-normal leading-normal flex size-10 items-center justify-center text-[#111718] rounded-full">...</span>
      <a class="text-sm font-normal leading-normal flex size-10 items-center justify-center text-[#111718] rounded-full" href="#">10</a>
      <a href="#" class="flex size-10 items-center justify-center">
        <i class="fas fa-chevron-right text-[#111718]"></i>
      </a>
    </div>
  </div>

  <script>
    // Set minimum date to today
    document.addEventListener("DOMContentLoaded", function () {
      const dateInput = document.getElementById("appointment-date");
      if (dateInput) {
        const today = new Date().toISOString().split("T")[0];
        dateInput.min = today;
      }

      // Initialize filters
      document
        .getElementById("therapist-search")
        .addEventListener("input", filterTherapists);

      // Add event listeners for filter buttons
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Toggle dropdown (placeholder for future implementation)
          console.log('Filter clicked:', this.dataset.filter);
        });
      });

      // Handle appointment booking
      document
        .getElementById("appointment-form")
        .addEventListener("submit", bookAppointment);
    });

    function filterTherapists() {
       const search = document
         .getElementById("therapist-search")
         .value.toLowerCase();
       const therapistCards = document.querySelectorAll(
         "#therapists-grid [data-specialty]"
       );
       let visibleCount = 0;

       therapistCards.forEach((card) => {
         const cardName = card.dataset.name;
         const cardBio = (card.dataset.bio || '').toLowerCase();

         const matchesSearch = !search ||
           cardName.includes(search) ||
           cardBio.includes(search);

         if (matchesSearch) {
           card.style.display = "flex";
           visibleCount++;
         } else {
           card.style.display = "none";
         }
       });

       // Update count if element exists
       const countElement = document.getElementById("therapist-count");
       if (countElement) {
         countElement.textContent = visibleCount;
       }
     }

    // Schedule consultation function
    function scheduleConsultation(therapistId, therapistName) {
      document.getElementById("therapist-id").value = therapistId;
      const modal = document.getElementById("booking-modal");
      modal.style.display = "flex";
      modal.classList.remove("hidden");
    }

    function closeBookingModal() {
      const modal = document.getElementById("booking-modal");
      modal.style.display = "none";
      modal.classList.add("hidden");
    }

    // Handle appointment booking
    async function bookAppointment(e) {
      e.preventDefault();

      // Check if user is authenticated before making request
      const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';

      if (!isAuthenticated) {
        alert("Please login to book appointments with therapists.");
        window.location.href = "/login";
        return;
      }

      // Additional session validation
      const sessionValid = await checkSessionValidity();
      if (!sessionValid) {
        alert("Your session has expired. Please login again.");
        window.location.href = "/login";
        return;
      }

      const formData = {
        therapistId: document.getElementById("therapist-id").value,
        preferredDate: document.getElementById("appointment-date").value,
        preferredTime: document.getElementById("appointment-time").value,
        sessionType: document.getElementById("session-type").value,
        notes: document.getElementById("appointment-notes").value,
      };

      try {
        console.log("Booking appointment with data:", formData);

        // Changed from '/api/appointments/book' to '/appointments/book'
        const response = await fetch("/appointments/book", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        console.log("Appointment booking response status:", response.status);

        // Add better error handling
        if (!response.ok) {
          if (response.status === 401) {
            console.error("Authentication failed - redirecting to login");
            alert("Your session has expired. Please login again.");
            window.location.href = "/login";
            return;
          }
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          const text = await response.text();
          console.error("Received non-JSON response:", text);
          throw new Error(
            "Server returned HTML instead of JSON. Check server logs."
          );
        }

        const data = await response.json();
        console.log("Appointment booking response data:", data);

        if (data.success) {
          alert(
            "Appointment request sent successfully! You'll be notified when the therapist confirms."
          );
          closeBookingModal();
          document.getElementById("appointment-form").reset();
        } else {
          alert(data.error || "Failed to book appointment");
        }
      } catch (error) {
        console.error("Error booking appointment:", error);
        alert("Failed to book appointment. Please try again.");
      }
    }

    // Mark notification as read
    async function markNotificationRead(notificationId) {
      try {
        const response = await fetch("/notifications/read", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ notificationId }),
        });

        if (response.ok) {
          // Update UI
          const notificationDiv = document
            .querySelector(
              `[onclick="markNotificationRead(${notificationId})"]`
            )
            .closest("div");
          notificationDiv.classList.remove(
            "bg-blue-50",
            "border-l-4",
            "border-l-blue-500"
          );
          notificationDiv.classList.add("bg-gray-50");
          notificationDiv.querySelector("button").remove();

          // Update badge
          const unreadCount = document.querySelector(".bg-blue-500.text-white");
          if (unreadCount) {
            let count = parseInt(unreadCount.textContent);
            count--;
            if (count > 0) {
              unreadCount.textContent = count;
            } else {
              unreadCount.remove();
            }
          }
        }
      } catch (error) {
        console.error("Error marking notification as read:", error);
      }
    }

    // Check session validity
    async function checkSessionValidity() {
      try {
        const response = await fetch("/api/session/validate", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const data = await response.json();
          return data.success;
        } else {
          return false;
        }
      } catch (error) {
        console.error("Error checking session validity:", error);
        return false;
      }
    }

    // Start chat function - now works with assigned therapist
    async function startChat(therapistId, therapistName) {
      try {
        // Check if user is authenticated before making request
        const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';

        if (!isAuthenticated) {
          alert("Please login to start a chat with therapists.");
          window.location.href = "/login";
          return;
        }

        // Additional session validation
        const sessionValid = await checkSessionValidity();
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        console.log("Starting chat with therapist:", therapistId);

        // Use the chat controller endpoint
        const response = await fetch("/appointments/chat/start", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ therapistId }),
        });

        console.log("Chat start response status:", response.status);

        if (!response.ok) {
          if (response.status === 401) {
            console.error("Authentication failed - redirecting to login");
            alert("Your session has expired. Please login again.");
            window.location.href = "/login";
            return;
          }
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Server returned HTML instead of JSON");
        }

        const data = await response.json();
        console.log("Chat start response data:", data);

        if (data.success) {
           console.log("Chat started successfully, redirecting to:", data.conversationId);
           window.location.href = `/appointments/chat/${data.conversationId}`;
         } else {
          alert(data.error || "Failed to start chat");
        }
      } catch (error) {
        console.error("Error starting chat:", error);
        alert("Failed to start chat. Please try again.");
      }
    }

    // Select therapist function - immediately assign therapist
    async function selectTherapist(buttonElement) {
      const therapistId = buttonElement.dataset.therapistId;
      const card = buttonElement.closest('[data-therapist-id]');
      const therapistName = card.dataset.therapistName;

      // Disable button immediately
      buttonElement.disabled = true;
      buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Selecting...';

      try {
        // Check if user is authenticated
        const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';
        if (!isAuthenticated) {
          alert("Please login to select a therapist.");
          window.location.href = "/login";
          return;
        }

        // Check session validity
        const sessionValid = await checkSessionValidity();
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        // Make API call to select therapist
        const response = await fetch('/select-therapist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ therapistId })
        });

        const data = await response.json();

        if (data.success) {
          // Update button to show success state
          buttonElement.innerHTML = '<i class="fas fa-check mr-2"></i>Your Therapist';
          buttonElement.classList.remove('btn-primary');
          buttonElement.classList.add('btn-success');

          // Show success message
          showTempMessage(`${therapistName} is now your personal therapist!`, 'success');

          // Update navbar to show therapist is selected
          updateNavbarTherapistStatus(true);

          // Disable all other therapist selection buttons
          document.querySelectorAll('.therapist-select-btn').forEach(btn => {
            if (btn !== buttonElement) {
              btn.disabled = true;
              btn.innerHTML = '<i class="fas fa-times mr-2"></i>Therapist Selected';
              btn.classList.remove('btn-primary');
              btn.classList.add('btn-secondary');
            }
          });

        } else {
          // Re-enable button on error
          buttonElement.disabled = false;
          buttonElement.innerHTML = '<i class="fas fa-user-md mr-2"></i>Make Your Therapist';

          alert(data.error || 'Failed to select therapist. Please try again.');
        }
      } catch (error) {
        console.error('Error selecting therapist:', error);

        // Re-enable button on error
        buttonElement.disabled = false;
        buttonElement.innerHTML = '<i class="fas fa-user-md mr-2"></i>Make Your Therapist';

        alert('Failed to select therapist. Please try again.');
      }
    }

    // Show temporary message
    function showTempMessage(message, type = 'info') {
      let msgDiv = document.getElementById('temp-message');
      if (!msgDiv) {
        msgDiv = document.createElement('div');
        msgDiv.id = 'temp-message';
        msgDiv.className = 'fixed top-16 right-4 z-50';
        document.body.appendChild(msgDiv);
      }

      const colors = {
        info: 'bg-blue-100 border-blue-500 text-blue-700',
        success: 'bg-green-100 border-green-500 text-green-700',
        warning: 'bg-yellow-100 border-yellow-500 text-yellow-700',
        error: 'bg-red-100 border-red-500 text-red-700'
      };

      msgDiv.innerHTML = `
        <div class="p-3 border-l-4 rounded shadow-lg max-w-sm ${colors[type] || colors.info}">
          ${message}
        </div>
      `;
      msgDiv.style.display = 'block';

      setTimeout(() => {
        msgDiv.style.display = 'none';
      }, 4000);
    }

    // Update navbar to show therapist selection status
    function updateNavbarTherapistStatus(hasTherapist) {
      // This function can be used to update navbar if needed
      console.log('Therapist selection status updated:', hasTherapist);
    }

    // View therapist profile function
    function viewTherapistProfile(therapistId) {
      // Check if user is authenticated
      const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';

      if (!isAuthenticated) {
        alert("Please login to view therapist profiles.");
        window.location.href = "/login";
        return;
      }

      // Check session validity
      checkSessionValidity().then(sessionValid => {
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        // Redirect to therapist profile page
        window.location.href = `/therapist/profile/${therapistId}`;
      });
    }

    // Start chat with assigned therapist
    async function startChatWithTherapist(therapistId, therapistName) {
      try {
        // Check if user is authenticated
        const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';

        if (!isAuthenticated) {
          alert("Please login to start a chat with your therapist.");
          window.location.href = "/login";
          return;
        }

        // Check session validity
        const sessionValid = await checkSessionValidity();
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        console.log("Starting chat with assigned therapist:", therapistId);

        // Use the chat controller endpoint
        const response = await fetch("/appointments/chat/start", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ therapistId }),
        });

        console.log("Chat start response status:", response.status);

        if (!response.ok) {
          if (response.status === 401) {
            console.error("Authentication failed - redirecting to login");
            alert("Your session has expired. Please login again.");
            window.location.href = "/login";
            return;
          }
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Server returned HTML instead of JSON");
        }

        const data = await response.json();
        console.log("Chat start response data:", data);

        if (data.success) {
           console.log("Chat started successfully, redirecting to:", data.conversationId);
           window.location.href = `/appointments/chat/${data.conversationId}`;
         } else {
          alert(data.error || "Failed to start chat");
        }
      } catch (error) {
        console.error("Error starting chat with therapist:", error);
        alert("Failed to start chat. Please try again.");
      }
    }

    // Book session with assigned therapist
    function bookSessionWithTherapist(therapistId, therapistName) {
      // Check if user is authenticated
      const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';

      if (!isAuthenticated) {
        alert("Please login to book sessions with your therapist.");
        window.location.href = "/login";
        return;
      }

      // Check session validity
      checkSessionValidity().then(sessionValid => {
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        // Redirect to book session page with pre-selected therapist
        window.location.href = `/book-session?therapistId=${therapistId}`;
      });
    }

    // ================== WEBRTC VIDEO CALLING SYSTEM ==================

    let localStream = null;
    let remoteStream = null;
    let peerConnection = null;
    let socket = null;
    let currentCallTherapistId = null;
    let isInitiator = false;
    let isAudioMuted = false;
    let isVideoOff = false;

    // Initialize Socket.io connection for signaling
    function initializeSocket() {
      if (socket) return; // Already initialized

      socket = io();

      socket.on('connect', () => {
        console.log('Connected to signaling server');

        // Authenticate user with socket server
        if (document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true') {
          socket.emit('authenticate', {
            userId: '<%= user ? user.id : null %>',
            role: '<%= user ? user.role : null %>'
          });
        }
      });

      socket.on('call-offer', handleCallOffer);
      socket.on('call-answer', handleCallAnswer);
      socket.on('ice-candidate', handleIceCandidate);
      socket.on('call-ended', handleCallEnded);
      socket.on('user-disconnected', handleUserDisconnected);
    }

    // Start video call
    async function startVideoCall(therapistId, therapistName) {
      try {
        // Check if user is authenticated
        const isAuthenticated = document.querySelector('[data-user-authenticated]')?.dataset.userAuthenticated === 'true';
        if (!isAuthenticated) {
          alert("Please login to make video calls.");
          window.location.href = "/login";
          return;
        }

        // Check session validity
        const sessionValid = await checkSessionValidity();
        if (!sessionValid) {
          alert("Your session has expired. Please login again.");
          window.location.href = "/login";
          return;
        }

        currentCallTherapistId = therapistId;

        // Initialize socket connection
        initializeSocket();

        // Get user media (camera and microphone)
        await getUserMedia();

        // Show call modal
        showCallModal(therapistName);

        // Create peer connection
        await createPeerConnection();

        // Start call as initiator
        isInitiator = true;
        await createOffer();

      } catch (error) {
        console.error('Error starting video call:', error);
        alert('Failed to start video call. Please check your camera and microphone permissions.');
      }
    }

    // Get user media (camera and microphone)
    async function getUserMedia() {
      try {
        const constraints = {
          video: true,
          audio: true
        };

        localStream = await navigator.mediaDevices.getUserMedia(constraints);

        const localVideo = document.getElementById('local-video');
        if (localVideo) {
          localVideo.srcObject = localStream;
        }

        console.log('Local media stream obtained');
      } catch (error) {
        console.error('Error accessing media devices:', error);
        throw error;
      }
    }

    // Create RTCPeerConnection
    async function createPeerConnection() {
      const configuration = {
        iceServers: [
          { urls: 'stun:stun.l.google.com:19302' },
          { urls: 'stun:stun1.l.google.com:19302' }
        ]
      };

      peerConnection = new RTCPeerConnection(configuration);

      // Add local stream tracks to peer connection
      if (localStream) {
        localStream.getTracks().forEach(track => {
          peerConnection.addTrack(track, localStream);
        });
      }

      // Handle remote stream
      peerConnection.ontrack = (event) => {
        console.log('Received remote stream');
        remoteStream = event.streams[0];

        const remoteVideo = document.getElementById('remote-video');
        if (remoteVideo) {
          remoteVideo.srcObject = remoteStream;
        }

        updateCallStatus('Connected');
      };

      // Handle ICE candidates
      peerConnection.onicecandidate = (event) => {
        if (event.candidate && socket) {
          socket.emit('ice-candidate', {
            candidate: event.candidate,
            targetUserId: currentCallTherapistId
          });
        }
      };

      // Handle connection state changes
      peerConnection.onconnectionstatechange = () => {
        console.log('Connection state:', peerConnection.connectionState);

        if (peerConnection.connectionState === 'connected') {
          updateCallStatus('Connected');
        } else if (peerConnection.connectionState === 'disconnected' || peerConnection.connectionState === 'failed') {
          updateCallStatus('Disconnected');
        }
      };
    }

    // Create and send call offer
    async function createOffer() {
      try {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        if (socket) {
          socket.emit('call-offer', {
            offer: offer,
            targetUserId: currentCallTherapistId,
            callerName: '<%= user ? user.name : "User" %>'
          });
        }

        updateCallStatus('Calling...');
      } catch (error) {
        console.error('Error creating offer:', error);
      }
    }

    // Handle incoming call offer
    async function handleCallOffer(data) {
      if (data.fromUserId === currentCallTherapistId) {
        console.log('Receiving call offer');
        isInitiator = false;

        // Get user media if not already obtained
        if (!localStream) {
          await getUserMedia();
        }

        // Create peer connection
        await createPeerConnection();

        // Set remote description
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));

        // Create and send answer
        await createAnswer();
      }
    }

    // Create and send call answer
    async function createAnswer() {
      try {
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);

        if (socket) {
          socket.emit('call-answer', {
            answer: answer,
            targetUserId: currentCallTherapistId
          });
        }
      } catch (error) {
        console.error('Error creating answer:', error);
      }
    }

    // Handle call answer
    async function handleCallAnswer(data) {
      if (isInitiator) {
        try {
          await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
          console.log('Call answered');
        } catch (error) {
          console.error('Error handling call answer:', error);
        }
      }
    }

    // Handle ICE candidates
    function handleIceCandidate(data) {
      if (data.fromUserId === currentCallTherapistId) {
        peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate))
          .catch(error => console.error('Error adding ICE candidate:', error));
      }
    }

    // Handle call ended
    function handleCallEnded(data) {
      if (data.fromUserId === currentCallTherapistId) {
        endVideoCall();
        alert('Call ended by the other party');
      }
    }

    // Handle user disconnected
    function handleUserDisconnected(data) {
      if (data.userId === currentCallTherapistId) {
        endVideoCall();
        alert('The other party disconnected');
      }
    }

    // Show call modal
    function showCallModal(therapistName) {
      const modal = document.getElementById('video-call-modal');
      const remoteName = document.getElementById('remote-name');

      if (modal) {
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
      }

      if (remoteName) {
        remoteName.textContent = therapistName;
      }

      updateCallStatus('Connecting...');
    }

    // End video call
    function endVideoCall() {
      // Close peer connection
      if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
      }

      // Stop local stream
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
      }

      // Clear remote stream
      remoteStream = null;

      // Hide call modal
      const modal = document.getElementById('video-call-modal');
      if (modal) {
        modal.style.display = 'none';
        modal.classList.add('hidden');
      }

      // Clear videos
      const localVideo = document.getElementById('local-video');
      const remoteVideo = document.getElementById('remote-video');

      if (localVideo) localVideo.srcObject = null;
      if (remoteVideo) remoteVideo.srcObject = null;

      // Reset call state
      currentCallTherapistId = null;
      isInitiator = false;
      isAudioMuted = false;
      isVideoOff = false;

      // Notify other party
      if (socket) {
        socket.emit('call-ended', { targetUserId: currentCallTherapistId });
      }
    }

    // Toggle mute
    function toggleMute() {
      if (localStream) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
          isAudioMuted = !isAudioMuted;
          audioTrack.enabled = !isAudioMuted;

          const muteBtn = document.getElementById('mute-btn');
          if (muteBtn) {
            muteBtn.innerHTML = isAudioMuted ?
              '<i class="fas fa-microphone-slash"></i>' :
              '<i class="fas fa-microphone"></i>';
            muteBtn.classList.toggle('bg-red-500', isAudioMuted);
            muteBtn.classList.toggle('bg-gray-600', !isAudioMuted);
          }
        }
      }
    }

    // Toggle video
    function toggleVideo() {
      if (localStream) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
          isVideoOff = !isVideoOff;
          videoTrack.enabled = !isVideoOff;

          const videoBtn = document.getElementById('video-btn');
          if (videoBtn) {
            videoBtn.innerHTML = isVideoOff ?
              '<i class="fas fa-video-slash"></i>' :
              '<i class="fas fa-video"></i>';
            videoBtn.classList.toggle('bg-red-500', isVideoOff);
            videoBtn.classList.toggle('bg-gray-600', !isVideoOff);
          }
        }
      }
    }

    // Update call status
    function updateCallStatus(status) {
      const statusElement = document.getElementById('call-status');
      if (statusElement) {
        statusElement.textContent = status;
      }
    }

    // Initialize video calling when page loads
    document.addEventListener('DOMContentLoaded', function() {
      // Add Socket.io script if not already present
      if (!document.querySelector('script[src*="socket.io"]')) {
        const socketScript = document.createElement('script');
        socketScript.src = '/socket.io/socket.io.js';
        document.head.appendChild(socketScript);
      }
    });
  </script>
</div>
