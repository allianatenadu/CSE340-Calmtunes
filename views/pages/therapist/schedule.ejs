<!-- Real Dynamic Schedule page for therapist layout -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Header Section -->
  <div class="mb-6 sm:mb-8">
    <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-2">Schedule</h1>
  </div>

  <!-- Main Content Grid -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6">
    <!-- Left Column - Appointment Requests -->
    <div class="lg:col-span-1 space-y-6">
      <!-- Appointment Requests -->
      <div class="bg-white rounded-2xl shadow-sm border border-gray-200">
        <div class="p-6 border-b border-gray-200">
          <h2 class="text-xl font-bold text-gray-900 flex items-center gap-3">
            <i class="fas fa-bell text-yellow-500"></i>
            Appointment Requests
          </h2>
        </div>
        <div class="p-6">
          <div id="pendingRequestsList" class="space-y-4">
            <% if (pendingAppointments && pendingAppointments.length > 0) { %>
              <% pendingAppointments.forEach(function(request) { %>
                <div class="bg-yellow-50 rounded-xl p-5 border border-yellow-200">
                  <div class="flex justify-between items-start mb-3">
                    <div class="flex-1">
                      <div class="flex items-center gap-2 mb-1">
                        <div class="w-8 h-8 bg-yellow-200 rounded-full flex items-center justify-center">
                          <span class="text-yellow-700 text-sm font-semibold">
                            <%= request.patient_name.charAt(0) %>
                          </span>
                        </div>
                        <h4 class="font-semibold text-gray-900"><%= request.patient_name %></h4>
                      </div>
                      <p class="text-sm text-gray-600 ml-10">
                        <%= new Date(request.appointment_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %> at 
                        <%= new Date('2000-01-01 ' + request.appointment_time).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                      </p>
                      <p class="text-xs text-gray-500 ml-10 mt-1"><%= request.session_type %></p>
                    </div>
                    <span class="bg-yellow-200 text-yellow-800 text-xs px-3 py-1 rounded-full font-medium">Pending</span>
                  </div>
                  <% if (request.notes) { %>
                    <p class="text-sm text-gray-700 mb-4 ml-10 italic"><%= request.notes %></p>
                  <% } %>
                  <div class="flex gap-2">
                    <button onclick="approveAppointment('<%= request.id %>')" 
                            class="flex-1 bg-green-500 hover:bg-green-600 text-white text-sm py-2.5 px-4 rounded-lg font-medium transition-all">
                      Approve
                    </button>
                    <button onclick="rejectAppointment('<%= request.id %>')" 
                            class="flex-1 bg-red-500 hover:bg-red-600 text-white text-sm py-2.5 px-4 rounded-lg font-medium transition-all">
                      Reject
                    </button>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <div id="noPendingRequests" class="text-center py-12">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <i class="fas fa-check-circle text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">All Caught Up!</h3>
                <p class="text-sm text-gray-500">No pending appointment requests.</p>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Schedule Statistics -->
      <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
        <h2 class="text-xl font-bold text-gray-900 mb-4">Schedule Statistics</h2>
        <div class="grid grid-cols-2 gap-3 sm:gap-4">
          <div class="flex flex-col gap-1 rounded-lg p-4 border border-gray-200">
            <p class="text-sm font-medium text-gray-500">Pending Requests</p>
            <p class="text-2xl font-bold text-gray-900" id="pending-count">0</p>
          </div>
          <div class="flex flex-col gap-1 rounded-lg p-4 border border-gray-200">
            <p class="text-sm font-medium text-gray-500">Today's Sessions</p>
            <p class="text-2xl font-bold text-gray-900" id="today-count">0</p>
          </div>
          <div class="flex flex-col gap-1 rounded-lg p-4 border border-gray-200">
            <p class="text-sm font-medium text-gray-500">This Week</p>
            <p class="text-2xl font-bold text-gray-900" id="week-count">0</p>
          </div>
          <div class="flex flex-col gap-1 rounded-lg p-4 border border-gray-200">
            <p class="text-sm font-medium text-gray-500">Total Upcoming</p>
            <p class="text-2xl font-bold text-gray-900" id="upcoming-count">0</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Column - Calendar View -->
    <div class="lg:col-span-2 space-y-6">
      <!-- Month Calendar -->
      <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between mb-4">
          <button id="prevMonth" class="w-10 h-10 flex items-center justify-center rounded-full hover:bg-gray-100 transition-colors">
            <i class="fas fa-chevron-left text-gray-600"></i>
          </button>
          <h3 id="monthYearDisplay" class="text-lg font-bold text-gray-900"></h3>
          <button id="nextMonth" class="w-10 h-10 flex items-center justify-center rounded-full hover:bg-gray-100 transition-colors">
            <i class="fas fa-chevron-right text-gray-600"></i>
          </button>
        </div>
        
        <!-- Calendar Grid -->
        <div class="grid grid-cols-7 gap-1 text-center text-sm">
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">S</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">M</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">T</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">W</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">T</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">F</div>
          <div class="h-10 flex items-center justify-center font-bold text-gray-500">S</div>
          <div id="calendarDays" class="contents">
            <!-- Calendar days will be generated here -->
          </div>
        </div>
      </div>

      <!-- Weekly Schedule Table -->
      <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
        <div class="p-6 border-b border-gray-200">
          <div class="flex justify-between items-center">
            <div>
              <h2 class="text-xl font-bold text-gray-900 flex items-center gap-3 mb-2">
                <i class="fas fa-calendar text-blue-500"></i>
                Weekly Schedule
              </h2>
              <p id="weekRange" class="text-sm text-gray-500"></p>
            </div>
            <div class="flex items-center gap-2">
              <button id="prevWeek" class="w-9 h-9 flex items-center justify-center rounded-lg hover:bg-gray-100 text-gray-600 transition-colors">
                <i class="fas fa-chevron-left text-sm"></i>
              </button>
              <button id="todayBtn" class="px-4 py-2 bg-teal-500 hover:bg-teal-600 text-white rounded-lg text-sm font-medium transition-colors">
                Today
              </button>
              <button id="nextWeek" class="w-9 h-9 flex items-center justify-center rounded-lg hover:bg-gray-100 text-gray-600 transition-colors">
                <i class="fas fa-chevron-right text-sm"></i>
              </button>
            </div>
          </div>
          
          <!-- Legend -->
          <div class="flex items-center gap-4 text-sm mt-4">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-400 rounded-sm"></div>
              <span class="text-gray-600">Available</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-blue-400 rounded-sm"></div>
              <span class="text-gray-600">Booked</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-yellow-400 rounded-sm"></div>
              <span class="text-gray-600">Pending</span>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="w-full min-w-[800px]">
            <thead class="bg-gray-50 sticky top-0">
              <tr>
                <th class="px-4 py-3 text-left font-medium text-gray-600 w-28">Time</th>
                <th id="dayHeader0" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader1" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader2" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader3" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader4" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader5" class="px-4 py-3 text-center font-medium text-gray-600"></th>
                <th id="dayHeader6" class="px-4 py-3 text-center font-medium text-gray-600"></th>
              </tr>
            </thead>
            <tbody id="weeklyScheduleBody" class="divide-y divide-gray-200">
              <!-- Schedule rows will be generated here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
   // Global variables
   let currentDate = new Date();
   let currentWeekStart = new Date();

   // Initialize appointment arrays with EJS data
   let pendingAppointments = window.ejsData ? window.ejsData.pendingAppointments : [];
   let confirmedAppointments = window.ejsData ? window.ejsData.appointments : [];

   // Add conversation_id to appointments if not present
   if (confirmedAppointments) {
     confirmedAppointments = confirmedAppointments.map(apt => ({
       ...apt,
       conversation_id: apt.conversation_id || null
     }));
   }

  // Initialize
  document.addEventListener("DOMContentLoaded", function () {
    initializeCalendar();
    initializeWeekView();
    loadScheduleStatistics();
    initializeEventListeners();
  });

  function initializeCalendar() {
    renderMonthCalendar();
  }

  function renderMonthCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // Update month/year display
    const monthNames = ["January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December"];
    document.getElementById('monthYearDisplay').textContent = `${monthNames[month]} ${year}`;
    
    // Get first day of month and number of days
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const today = new Date();
    
    const calendarDays = document.getElementById('calendarDays');
    calendarDays.innerHTML = '';
    
    // Add empty cells for days before month starts
    for (let i = 0; i < firstDay; i++) {
      const emptyDiv = document.createElement('div');
      emptyDiv.className = 'h-10';
      calendarDays.appendChild(emptyDiv);
    }
    
    // Add days of month
    for (let day = 1; day <= daysInMonth; day++) {
      const dateObj = new Date(year, month, day);
      const isToday = dateObj.toDateString() === today.toDateString();
      
      const dayButton = document.createElement('button');
      dayButton.className = `h-10 w-full font-medium rounded-full transition-colors ${
        isToday 
          ? 'bg-blue-500 text-white font-bold' 
          : 'text-gray-700 hover:bg-gray-100'
      }`;
      dayButton.textContent = day;
      dayButton.addEventListener('click', () => selectDate(dateObj));
      calendarDays.appendChild(dayButton);
    }
  }

  function selectDate(date) {
    // Jump to the week containing this date
    const dayOfWeek = date.getDay();
    const diff = date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
    currentWeekStart = new Date(date);
    currentWeekStart.setDate(diff);
    currentWeekStart.setHours(0, 0, 0, 0);
    renderWeekView();
  }

  function initializeWeekView() {
    const today = new Date();
    const dayOfWeek = today.getDay();
    const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
    currentWeekStart = new Date(today);
    currentWeekStart.setDate(diff);
    currentWeekStart.setHours(0, 0, 0, 0);
    renderWeekView();
  }

  function renderWeekView() {
    updateWeekRange();
    renderWeekHeaders();
    renderWeekSchedule();
  }

  function updateWeekRange() {
    const weekEnd = new Date(currentWeekStart);
    weekEnd.setDate(weekEnd.getDate() + 6);
    const options = { month: 'short', day: 'numeric' };
    document.getElementById('weekRange').textContent = 
      `${currentWeekStart.toLocaleDateString('en-US', options)} - ${weekEnd.toLocaleDateString('en-US', options)}, ${currentWeekStart.getFullYear()}`;
  }

  function renderWeekHeaders() {
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    const today = new Date();
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(currentWeekStart);
      date.setDate(date.getDate() + i);
      const isToday = date.toDateString() === today.toDateString();
      
      const header = document.getElementById(`dayHeader${i}`);
      header.className = `px-4 py-3 text-center font-medium transition-colors ${
        isToday ? 'bg-blue-500 text-white font-bold' : 'text-gray-600'
      }`;
      header.textContent = `${days[i]} ${date.getDate()}`;
    }
  }

  function renderWeekSchedule() {
    console.log("Rendering week schedule");
    console.log("Available appointments - Pending:", pendingAppointments.length, "Confirmed:", confirmedAppointments.length);

    const tbody = document.getElementById('weeklyScheduleBody');
    if (!tbody) {
      console.error("Weekly schedule body not found");
      return;
    }

    tbody.innerHTML = '';
    
    const times = [
      { label: '9:00 AM', value: '09:00' },
      { label: '10:00 AM', value: '10:00' },
      { label: '11:00 AM', value: '11:00' },
      { label: '12:00 PM', value: '12:00' },
      { label: '1:00 PM', value: '13:00' },
      { label: '2:00 PM', value: '14:00' },
      { label: '3:00 PM', value: '15:00' },
      { label: '4:00 PM', value: '16:00' },
      { label: '5:00 PM', value: '17:00' }
    ];

    times.forEach(time => {
      const row = document.createElement('tr');
      row.className = 'h-20';
      
      // Time cell
      const timeCell = document.createElement('td');
      timeCell.className = 'px-4 py-2 text-gray-500 align-top';
      timeCell.textContent = time.label;
      row.appendChild(timeCell);
      
      // Day cells
      for (let day = 0; day < 7; day++) {
        const dayCell = document.createElement('td');
        dayCell.className = 'px-4 py-2 hover:bg-gray-50 cursor-pointer relative';
        dayCell.dataset.day = day;
        dayCell.dataset.time = time.value;
        
        // Check for appointments
        const dateForDay = new Date(currentWeekStart);
        dateForDay.setDate(dateForDay.getDate() + day);
        
        const appointment = findAppointment(dateForDay, time.value);
        if (appointment) {
          const isPending = appointment.status === 'pending';
          const isConfirmed = appointment.status === 'confirmed';
          dayCell.innerHTML = `
            <div class="${isPending ? 'bg-yellow-100 text-yellow-800' : isConfirmed ? 'bg-blue-400 text-white' : 'bg-blue-100 text-blue-800'} p-2 rounded-lg cursor-pointer hover:shadow-md transition-shadow">
              <p class="font-bold text-sm">${appointment.patient_name}</p>
              <p class="text-xs">${appointment.session_type}</p>
            </div>
          `;
          dayCell.addEventListener('click', () => showAppointmentDetails(appointment));
        } else {
          dayCell.addEventListener('click', function() {
            alert(`Create appointment for ${dateForDay.toDateString()} at ${time.label}`);
          });
        }
        
        row.appendChild(dayCell);
      }
      
      tbody.appendChild(row);
    });
  }

  function findAppointment(date, time) {
    const dateStr = date.toISOString().split('T')[0];

    // Check confirmed appointments
    const confirmed = confirmedAppointments.find(apt =>
      apt.appointment_date.startsWith(dateStr) && apt.appointment_time === time
    );
    if (confirmed) {
      console.log("Found confirmed appointment:", { date: dateStr, time, patient: confirmed.patient_name });
      return confirmed;
    }

    // Check pending appointments
    const pending = pendingAppointments.find(apt =>
      apt.appointment_date.startsWith(dateStr) && apt.appointment_time === time
    );
    if (pending) {
      console.log("Found pending appointment:", { date: dateStr, time, patient: pending.patient_name });
    }
    return pending;
  }

  function initializeEventListeners() {
    // Month navigation
    document.getElementById('prevMonth').addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      renderMonthCalendar();
    });

    document.getElementById('nextMonth').addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      renderMonthCalendar();
    });

    // Week navigation
    document.getElementById('prevWeek').addEventListener('click', () => {
      currentWeekStart.setDate(currentWeekStart.getDate() - 7);
      renderWeekView();
    });

    document.getElementById('nextWeek').addEventListener('click', () => {
      currentWeekStart.setDate(currentWeekStart.getDate() + 7);
      renderWeekView();
    });

    document.getElementById('todayBtn').addEventListener('click', () => {
      initializeWeekView();
    });
  }

  // Load schedule statistics from database
  async function loadScheduleStatistics() {
    try {
      console.log("Loading schedule statistics from database...");
      const response = await fetch('/therapist/schedule-stats');

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("Schedule statistics API response:", data);
      console.log("Response keys:", Object.keys(data));

      if (data.success && data.statistics) {
        console.log("Schedule statistics loaded:", data.statistics);

        // Update the DOM elements with real data
        const pendingCountEl = document.getElementById("pending-count");
        const todayCountEl = document.getElementById("today-count");
        const weekCountEl = document.getElementById("week-count");
        const upcomingCountEl = document.getElementById("upcoming-count");

        if (pendingCountEl) pendingCountEl.textContent = data.statistics.pendingRequests || 0;
        if (todayCountEl) todayCountEl.textContent = data.statistics.todaySessions || 0;
        if (weekCountEl) weekCountEl.textContent = data.statistics.weekSessions || 0;
        if (upcomingCountEl) upcomingCountEl.textContent = data.statistics.upcomingSessions || 0;
      } else {
        console.error("Failed to load schedule statistics:", data.error);
        // Fallback to local calculation
        updateCountsFromLocal();
      }
    } catch (error) {
      console.error("Error loading schedule statistics:", error);
      // Fallback to local calculation
      updateCountsFromLocal();
    }
  }

  function updateCountsFromLocal() {
    console.log("Using local calculation for statistics");
    console.log("Pending appointments:", pendingAppointments.length);
    console.log("Confirmed appointments:", confirmedAppointments.length);

    // Check if elements exist before updating them
    const pendingCountEl = document.getElementById("pending-count");
    const todayCountEl = document.getElementById("today-count");
    const weekCountEl = document.getElementById("week-count");
    const upcomingCountEl = document.getElementById("upcoming-count");

    if (!pendingCountEl || !todayCountEl || !weekCountEl || !upcomingCountEl) {
      console.warn("Count elements not found in DOM");
      return;
    }

    const today = new Date();
    const startOfWeek = new Date(today);
    // Fix: Handle Sunday (getDay() returns 0) correctly
    startOfWeek.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1));
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);

    const localPendingCount = pendingAppointments.length;
    pendingCountEl.textContent = localPendingCount;

    const todayAppointments = confirmedAppointments.filter(apt => {
      try {
        const aptDate = new Date(apt.appointment_date);
        return aptDate.toDateString() === today.toDateString();
      } catch (e) {
        console.error("Error parsing appointment date:", apt.appointment_date, e);
        return false;
      }
    });
    todayCountEl.textContent = todayAppointments.length;

    const weekAppointments = confirmedAppointments.filter(apt => {
      try {
        const aptDate = new Date(apt.appointment_date);
        return aptDate >= startOfWeek && aptDate <= endOfWeek;
      } catch (e) {
        console.error("Error parsing appointment date for week calculation:", apt.appointment_date, e);
        return false;
      }
    });
    weekCountEl.textContent = weekAppointments.length;

    const upcomingAppointments = confirmedAppointments.filter(apt => {
      try {
        const aptDate = new Date(apt.appointment_date);
        return aptDate > today;
      } catch (e) {
        console.error("Error parsing appointment date for upcoming calculation:", apt.appointment_date, e);
        return false;
      }
    });
    upcomingCountEl.textContent = upcomingAppointments.length;

    console.log("Local statistics calculated:", {
      pending: localPendingCount,
      today: todayAppointments.length,
      week: weekAppointments.length,
      upcoming: upcomingAppointments.length
    });
  }

  async function approveAppointment(appointmentId) {
    try {
      console.log("Approving appointment:", appointmentId);
      const response = await fetch(`/appointments/${appointmentId}/confirm`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" }
      });

      const data = await response.json();
      console.log("Approval response:", data);

      if (data.success) {
        showSuccess("Appointment approved!");
        const pendingIndex = pendingAppointments.findIndex(apt => apt.id == appointmentId);
        if (pendingIndex > -1) {
          const approved = pendingAppointments.splice(pendingIndex, 1)[0];
          approved.status = "confirmed";
          confirmedAppointments.push(approved);

          console.log("Moved appointment from pending to confirmed");
          console.log("Updated arrays - Pending:", pendingAppointments.length, "Confirmed:", confirmedAppointments.length);

          // Refresh the schedule view to show updated highlighting
          renderWeekView();
          loadScheduleStatistics(); // Also refresh statistics
        } else {
          console.warn("Could not find appointment in pending array");
        }
      } else {
        console.error("Approval failed:", data.error);
      }
    } catch (error) {
      console.error("Error approving appointment:", error);
      showError("Failed to approve appointment");
    }
  }

  async function rejectAppointment(appointmentId) {
    if (!confirm("Reject this appointment?")) return;

    try {
      const response = await fetch(`/appointments/${appointmentId}/reject`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" }
      });

      const data = await response.json();
      if (data.success) {
        showSuccess("Appointment rejected");
        // Refresh the schedule view and statistics
        renderWeekView();
        loadScheduleStatistics();
      }
    } catch (error) {
      showError("Failed to reject appointment");
    }
  }

  function showAppointmentDetails(appointment) {
    // Redirect to chat with this patient
    if (appointment.conversation_id) {
      // Go directly to existing conversation
      window.location.href = `/appointments/chat/${appointment.conversation_id}`;
    } else {
      // Create new conversation
      const chatUrl = `/appointments/chat/new?patientId=${appointment.patient_id}`;
      window.location.href = chatUrl;
    }
  }

  function showSuccess(message) {
    const toast = document.createElement("div");
    toast.className = "fixed top-20 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50";
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }

  function showError(message) {
    const toast = document.createElement("div");
    toast.className = "fixed top-20 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50";
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
  }
</script>

<style>
  table {
    border-collapse: collapse;
  }

  tbody tr:hover {
    background-color: #f9fafb;
  }

  .calendar-slot:hover {
    background-color: #eff6ff;
  }

  button:active {
    transform: scale(0.98);
  }

  @media (max-width: 1024px) {
    .lg\:grid-cols-3 {
      grid-template-columns: 1fr !important;
    }

    .lg\:col-span-2,
    .lg\:col-span-1 {
      grid-column: span 1 !important;
    }
  }
</style>