<!-- Patients page content for therapist layout -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Header Section -->
   <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6 sm:mb-8">
     <div>
       <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">Patients</h1>
     </div>
     <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 flex items-center justify-center w-full sm:w-auto">
       <i class="fas fa-plus mr-2"></i>New Patient
     </button>
   </div>

  <!-- Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div class="bg-white rounded-xl shadow-sm p-6">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600">Total Patients</p>
          <p class="text-3xl font-bold text-gray-900" id="totalPatients">25</p>
        </div>
        <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
          <i class="fas fa-users text-blue-600 text-xl"></i>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm p-6">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600">Active Chats</p>
          <p class="text-3xl font-bold text-gray-900" id="activeChats">5</p>
        </div>
        <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
          <i class="fas fa-comments text-green-600 text-xl"></i>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm p-6">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600">Upcoming Appointments</p>
          <p class="text-3xl font-bold text-gray-900" id="upcomingAppointments">12</p>
        </div>
        <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
          <i class="fas fa-calendar-alt text-orange-600 text-xl"></i>
        </div>
      </div>
    </div>
  </div>

  <!-- Search and Filter Section -->
  <div class="mb-4 sm:mb-6">
    <div class="flex flex-col gap-4 mb-4 sm:mb-6">
      <!-- Search Bar -->
      <div class="relative flex-1">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <i class="fas fa-search text-gray-400"></i>
        </div>
        <input
          type="text"
          id="searchPatients"
          class="block w-full pl-10 pr-3 py-2 sm:py-3 border border-gray-300 rounded-lg bg-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
          placeholder="Search patients by name or email..."
        />
      </div>

      <!-- Filter Tabs -->
      <div class="flex items-center space-x-1 bg-gray-100 p-1 rounded-lg overflow-x-auto">
        <button class="filter-btn active px-3 sm:px-4 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors whitespace-nowrap" data-filter="all">
          All Patients
        </button>
        <button class="filter-btn px-3 sm:px-4 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors whitespace-nowrap" data-filter="recent">
          Recent Activity
        </button>
        <button class="filter-btn px-3 sm:px-4 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors relative whitespace-nowrap" data-filter="unread">
          Unread Messages
          <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">3</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Patients Table -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
    <!-- Table Header -->
    <div class="px-6 py-4 border-b border-gray-200">
      <div class="grid grid-cols-12 gap-4 text-sm font-medium text-gray-500 uppercase tracking-wider">
        <div class="col-span-5">Patient</div>
        <div class="col-span-2">Sessions</div>
        <div class="col-span-3">Last Appointment</div>
        <div class="col-span-2">Status</div>
      </div>
    </div>

    <!-- Table Body -->
    <div id="patientsContainer">
      <!-- Loading State -->
      <div class="col-span-full p-8 text-center" id="loadingState">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <p class="text-gray-600">Loading patients...</p>
      </div>

      <!-- Empty State (hidden by default) -->
      <div class="col-span-full hidden p-8 text-center" id="emptyState">
        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="fas fa-user-friends text-2xl text-gray-400"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No Patients Yet</h3>
        <p class="text-gray-600">
          You haven't seen any patients yet. Patients will appear here once they book appointments with you.
        </p>
      </div>
    </div>
  </div>

  <!-- Patient Row Template (hidden) -->
  <template id="patientRowTemplate">
    <div class="patient-row px-6 py-4 border-b border-gray-100 hover:bg-gray-50 transition-colors">
      <div class="grid grid-cols-12 gap-4 items-center">
        <!-- Patient Info -->
        <div class="col-span-5 flex items-center">
          <div class="patient-avatar w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center mr-3 overflow-hidden">
            <i class="fas fa-user text-gray-500"></i>
          </div>
          <div>
            <h3 class="patient-name font-medium text-gray-900"></h3>
            <p class="patient-email text-sm text-gray-500"></p>
          </div>
        </div>

        <!-- Sessions -->
        <div class="col-span-2">
          <div class="text-sm text-gray-900">
            <span class="total-sessions font-medium">Total: </span><span class="total-sessions-count">0</span>
          </div>
          <div class="text-sm text-gray-500">
            <span class="upcoming-sessions">Upcoming: </span><span class="upcoming-sessions-count">0</span>
          </div>
        </div>

        <!-- Last Appointment -->
        <div class="col-span-3">
          <div class="last-appointment text-sm text-gray-900"></div>
        </div>

        <!-- Status -->
        <div class="col-span-1">
          <span class="patient-status inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Active
          </span>
        </div>

        <!-- Actions -->
        <div class="col-span-1 flex items-center space-x-2">
          <button class="chat-btn text-gray-400 hover:text-blue-600 p-1" title="Message">
            <i class="fas fa-comments"></i>
          </button>
          <button class="schedule-btn text-gray-400 hover:text-green-600 p-1" title="Schedule">
            <i class="fas fa-calendar-alt"></i>
          </button>
          <button class="menu-btn text-gray-400 hover:text-gray-600 p-1" title="More options">
            <i class="fas fa-ellipsis-h"></i>
          </button>
        </div>
      </div>
    </div>
  </template>
</div>

<script>
  // Updated JavaScript for patient page with proper chat functionality
  let currentPatients = [];

  document.addEventListener("DOMContentLoaded", function () {
    loadPatients();
    initializeEventListeners();

    // Add sample data for testing if no patients are returned from API
    setTimeout(() => {
      if (currentPatients.length === 0) {
        console.log("No patients loaded from API, adding sample data for testing...");
        addSampleDataForTesting();
      }
    }, 2000);
  });

  async function loadPatients() {
    try {
      showLoadingState();

      const response = await fetch("/therapist/api/patients");
      if (!response.ok) {
        throw new Error("Failed to load patients");
      }

      const data = await response.json();
      if (data.success) {
        currentPatients = data.patients || [];
        renderPatients(currentPatients);
        updateStats();
      } else {
        throw new Error(data.error || "Failed to load patients");
      }

      hideLoadingState();
    } catch (error) {
      console.error("Error loading patients:", error);
      showError("Failed to load patients. Please refresh the page.");
      hideLoadingState();
    }
  }

  function renderPatients(patients) {
    const container = document.getElementById("patientsContainer");
    const template = document.getElementById("patientRowTemplate");
    const loadingState = document.getElementById("loadingState");
    const emptyState = document.getElementById("emptyState");

    // Clear existing rows
    const existingRows = container.querySelectorAll(".patient-row");
    existingRows.forEach((row) => row.remove());

    if (patients.length === 0) {
      loadingState.classList.add("hidden");
      emptyState.classList.remove("hidden");
      return;
    }

    loadingState.classList.add("hidden");
    emptyState.classList.add("hidden");

    patients.forEach((patient) => {
      const row = template.content.cloneNode(true);
      const rowElement = row.querySelector(".patient-row");

      // Patient avatar
      const avatar = row.querySelector(".patient-avatar");
      if (patient.profile_image) {
        const img = document.createElement("img");
        img.src = patient.profile_image.startsWith("/")
          ? patient.profile_image
          : `/uploads/profiles/${patient.profile_image}`;
        img.alt = `${patient.name}'s Profile`;
        img.className = "w-10 h-10 rounded-full object-cover";
        img.onerror = function () {
          this.style.display = "none";
          avatar.innerHTML = '<i class="fas fa-user text-gray-500"></i>';
        };
        avatar.innerHTML = "";
        avatar.appendChild(img);
      }

      // Patient info
      row.querySelector(".patient-name").textContent = patient.name;
      row.querySelector(".patient-email").textContent = patient.email;

      // Sessions info
      const totalSessionsElement = row.querySelector(".total-sessions-count");
      const upcomingSessionsElement = row.querySelector(".upcoming-sessions-count");

      totalSessionsElement.textContent = patient.total_appointments || 0;
      upcomingSessionsElement.textContent = patient.upcoming_appointments || 0;

      // Last appointment
      const lastAppointment = row.querySelector(".last-appointment");
      if (patient.last_appointment) {
        const date = new Date(patient.last_appointment);
        lastAppointment.textContent = date.toLocaleDateString();
      } else {
        lastAppointment.textContent = "Never";
      }

      // Status (for now, default to Active, but could be based on patient data)
      const statusElement = row.querySelector(".patient-status");
      const isActive = patient.last_appointment && new Date(patient.last_appointment) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Active if appointment within 30 days

      if (isActive) {
        statusElement.textContent = "Active";
        statusElement.className = "patient-status inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800";
      } else {
        statusElement.textContent = "Inactive";
        statusElement.className = "patient-status inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800";
      }

      // Event listeners
      const chatBtn = row.querySelector(".chat-btn");
      const scheduleBtn = row.querySelector(".schedule-btn");
      const menuBtn = row.querySelector(".menu-btn");

      chatBtn.addEventListener("click", () => openChat(patient));
      scheduleBtn.addEventListener("click", () => scheduleAppointment(patient));
      menuBtn.addEventListener("click", () => viewPatientInfo(patient));

      // Set data attributes for filtering and searching
      rowElement.dataset.patientId = patient.id;
      rowElement.dataset.patientName = (patient.name || '').toLowerCase();
      rowElement.dataset.patientEmail = (patient.email || '').toLowerCase();
      rowElement.dataset.hasUnread = patient.unread_messages > 0;
      rowElement.dataset.lastAppointment = patient.last_appointment || "";

      // Also store original values for proper searching
      rowElement.dataset.originalName = patient.name || '';
      rowElement.dataset.originalEmail = patient.email || '';

      container.appendChild(row);
    });
  }

  function openChat(patient) {
    // If patient has an existing conversation, go directly to it
    if (patient.conversation_id) {
      window.location.href = `/appointments/chat/${patient.conversation_id}`;
    } else {
      // Start new conversation with this patient
      window.location.href = `/appointments/chat/new?patientId=${patient.id}`;
    }
  }

  function scheduleAppointment(patient) {
    window.location.href = `/therapist/schedule?patient=${patient.id}`;
  }

  function viewPatientInfo(patient) {
    window.location.href = `/therapist/patients/${patient.id}/info`;
  }

  function updateStats() {
    const totalPatients = currentPatients.length;
    const activeChats = currentPatients.filter(
      (p) => p.unread_messages > 0
    ).length;
    const upcomingAppointments = currentPatients.reduce(
      (sum, p) => sum + (p.upcoming_appointments || 0),
      0
    );

    document.getElementById("totalPatients").textContent = totalPatients;
    document.getElementById("activeChats").textContent = activeChats;
    document.getElementById("upcomingAppointments").textContent =
      upcomingAppointments;
  }

  function updateVisibleStats() {
    const visibleRows = document.querySelectorAll('.patient-row:not([style*="none"])');

    let totalVisible = visibleRows.length;
    let activeChatsVisible = 0;
    let upcomingAppointmentsVisible = 0;

    visibleRows.forEach((row) => {
      const patientId = row.dataset.patientId;

      // Find the corresponding patient data
      const patient = currentPatients.find(p => p.id == patientId);
      if (patient) {
        if (patient.unread_messages > 0) {
          activeChatsVisible++;
        }
        upcomingAppointmentsVisible += patient.upcoming_appointments || 0;
      }
    });

    // Update the display with visible stats
    const totalPatientsElement = document.getElementById("totalPatients");
    const activeChatsElement = document.getElementById("activeChats");
    const upcomingAppointmentsElement = document.getElementById("upcomingAppointments");

    if (totalPatientsElement) totalPatientsElement.textContent = totalVisible;
    if (activeChatsElement) activeChatsElement.textContent = activeChatsVisible;
    if (upcomingAppointmentsElement) upcomingAppointmentsElement.textContent = upcomingAppointmentsVisible;
  }

  function initializeEventListeners() {
    const searchInput = document.getElementById("searchPatients");
    searchInput.addEventListener("input", handleSearch);

    const filterButtons = document.querySelectorAll(".filter-btn");
    filterButtons.forEach((btn) => {
      btn.addEventListener("click", handleFilter);
    });
  }

  function handleSearch(e) {
    const query = e.target.value.toLowerCase().trim();
    const rows = document.querySelectorAll(".patient-row");

    console.log("Search query:", query);

    rows.forEach((row) => {
      if (!query) {
        // Show all rows if search is empty
        row.style.display = "block";
      } else {
        // Get search data from data attributes
        const name = (row.dataset.patientName || '').toLowerCase();
        const email = (row.dataset.patientEmail || '').toLowerCase();

        // Search in name and email - more flexible matching
        const nameMatch = name.includes(query);
        const emailMatch = email.includes(query);
        const fullNameMatch = (row.dataset.originalName || '').toLowerCase().includes(query);
        const fullEmailMatch = (row.dataset.originalEmail || '').toLowerCase().includes(query);

        if (nameMatch || emailMatch || fullNameMatch || fullEmailMatch) {
          row.style.display = "block";
          console.log("Match found for:", row.dataset.originalName, row.dataset.originalEmail);
        } else {
          row.style.display = "none";
        }
      }
    });

    // Update stats after filtering
    updateVisibleStats();
    console.log("Search completed for query:", query);
  }

  function handleFilter(e) {
    const filterButtons = document.querySelectorAll(".filter-btn");
    filterButtons.forEach((btn) => btn.classList.remove("active"));
    e.target.classList.add("active");

    const filter = e.target.dataset.filter;
    const rows = document.querySelectorAll(".patient-row");

    console.log("Filter applied:", filter);

    rows.forEach((row) => {
      let show = true;

      switch (filter) {
        case "all":
          show = true;
          break;
        case "recent":
          const lastAppointment = row.dataset.lastAppointment;
          if (lastAppointment) {
            const date = new Date(lastAppointment);
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            show = date > weekAgo;
            console.log("Recent filter - Date:", date, "Week ago:", weekAgo, "Show:", show);
          } else {
            show = false;
          }
          break;
        case "unread":
          show = row.dataset.hasUnread === "true";
          console.log("Unread filter - Has unread:", row.dataset.hasUnread, "Show:", show);
          break;
      }

      row.style.display = show ? "block" : "none";
    });

    // Update stats after filtering
    updateVisibleStats();
    console.log("Filter completed for:", filter);
  }

  function showLoadingState() {
    document.getElementById("loadingState").classList.remove("hidden");
  }

  function hideLoadingState() {
    document.getElementById("loadingState").classList.add("hidden");
  }

  function showError(message) {
    const toast = document.createElement("div");
    toast.className =
      "fixed top-20 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-70";
    toast.textContent = message;
    document.body.appendChild(toast);
  
    setTimeout(() => {
      toast.remove();
    }, 5000);
  }

  function addSampleDataForTesting() {
    // Sample patient data for testing search and filter functionality
    const samplePatients = [
      {
        id: 1,
        name: "Emma Wilson",
        email: "emma.wilson@email.com",
        total_appointments: 10,
        upcoming_appointments: 2,
        last_appointment: "2024-03-15",
        unread_messages: 3,
        profile_image: null
      },
      {
        id: 2,
        name: "Liam Johnson",
        email: "liam.johnson@email.com",
        total_appointments: 5,
        upcoming_appointments: 1,
        last_appointment: "2024-03-10",
        unread_messages: 0,
        profile_image: null
      },
      {
        id: 3,
        name: "Olivia Davis",
        email: "olivia.davis@email.com",
        total_appointments: 15,
        upcoming_appointments: 3,
        last_appointment: "2024-03-20",
        unread_messages: 1,
        profile_image: null
      },
      {
        id: 4,
        name: "Noah Anderson",
        email: "noah.anderson@email.com",
        total_appointments: 8,
        upcoming_appointments: 0,
        last_appointment: "2024-03-05",
        unread_messages: 0,
        profile_image: null
      },
      {
        id: 5,
        name: "Sophia Thomas",
        email: "sophia.thomas@email.com",
        total_appointments: 12,
        upcoming_appointments: 1,
        last_appointment: "2024-03-12",
        unread_messages: 2,
        profile_image: null
      }
    ];

    currentPatients = samplePatients;
    renderPatients(samplePatients);
    updateStats();

    console.log("Sample data loaded for testing. Try searching for: Emma, Johnson, olivia.davis@email.com");
  }
</script>

<style>
  .filter-btn {
    @apply px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200;
  }

  .filter-btn.active {
    @apply bg-blue-600 text-white;
  }

  .filter-btn:not(.active) {
    @apply text-gray-600 hover:text-gray-900;
  }

  .patient-row {
    @apply transition-colors duration-200;
  }

  .patient-row:hover {
    @apply bg-gray-50;
  }

  .patient-status {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }

  /* Toast notification styles for layout compatibility */
  .fixed.top-20.right-4 {
    z-index: 70; /* Ensure toasts appear above sidebar */
  }

  /* Responsive design */
  @media (max-width: 1024px) {
    .filter-btn {
      @apply px-3 py-1.5 text-xs;
    }
  }

  @media (max-width: 768px) {
    .grid-cols-12 {
      grid-template-columns: 1fr;
    }

    .col-span-5, .col-span-2, .col-span-3, .col-span-1 {
      @apply col-span-1;
    }

    .patient-row .grid {
      @apply flex flex-col space-y-2;
    }

    .patient-row .grid > div {
      @apply flex items-center justify-between;
    }
  }
</style>