<div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Header -->
  <div class="mb-8">
    <h1 class="text-3xl md:text-4xl font-bold text-textMain mb-4">
      ðŸ”” Notifications
    </h1>
    <p class="text-xl text-gray-600">
      Stay updated with your therapist requests, appointments, and messages
    </p>
  </div>

  <!-- Notification Filters -->
  <div class="bg-white rounded-xl shadow-md p-6 mb-8">
    <div class="flex flex-wrap gap-4 items-center justify-between">
      <div class="flex gap-4">
        <button onclick="filterNotifications('all')"
                class="filter-btn active px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                data-filter="all">
          All
        </button>
        <button onclick="filterNotifications('unread')"
                class="filter-btn px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                data-filter="unread">
          Unread
        </button>
        <button onclick="filterNotifications('requests')"
                class="filter-btn px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                data-filter="requests">
          Requests
        </button>
        <button onclick="filterNotifications('appointments')"
                class="filter-btn px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                data-filter="appointments">
          Appointments
        </button>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sm text-gray-600" id="notification-count">0 notifications</span>
        <button onclick="markAllAsRead()"
                class="text-primary hover:text-primary/80 text-sm font-medium transition-colors">
          Mark all as read
        </button>
      </div>
    </div>
  </div>

  <!-- Notifications List -->
  <div id="notifications-container" class="space-y-4">
    <!-- Loading state -->
    <div id="loading-state" class="text-center py-12">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
      <p class="text-gray-600">Loading notifications...</p>
    </div>

    <!-- Empty state -->
    <div id="empty-state" class="hidden text-center py-12">
      <div class="w-24 h-24 bg-gray-100 rounded-full mx-auto mb-6 flex items-center justify-center">
        <i class="fas fa-bell-slash text-3xl text-gray-400"></i>
      </div>
      <h3 class="text-xl font-medium text-gray-600 mb-2">No notifications yet</h3>
      <p class="text-gray-500">
        When you receive notifications, they'll appear here
      </p>
    </div>
  </div>

  <!-- Therapist Requests Section (for therapists only) -->
  <div id="therapist-requests-section" class="mt-12 hidden">
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-100">
        <h2 class="text-xl font-semibold text-textMain flex items-center">
          <i class="fas fa-user-plus mr-3 text-primary"></i>
          Patient Requests
        </h2>
      </div>
      <div id="requests-container" class="p-6">
        <!-- Requests will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Chat with Admin Section -->
  <div class="mt-8">
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
      <div class="px-6 py-4 border-b border-gray-100">
        <h2 class="text-xl font-semibold text-textMain flex items-center">
          <i class="fas fa-comments mr-3 text-primary"></i>
          Chat with Admin
        </h2>
      </div>
      <div class="p-6">
        <div class="bg-gray-50 rounded-lg p-4 mb-4">
          <p class="text-gray-700 text-sm">
            Need help or have questions? Start a conversation with our admin team.
          </p>
        </div>
        <button onclick="startAdminChat()"
                class="btn-primary w-full sm:w-auto">
          <i class="fas fa-comment mr-2"></i>Start Chat with Admin
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Notification Detail Modal -->
<div id="notification-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
  <div class="bg-white rounded-xl max-w-md w-full">
    <div class="p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-xl font-semibold" id="modal-title">Notification Details</h3>
        <button onclick="closeNotificationModal()" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times"></i>
        </button>
      </div>

      <div id="modal-content" class="space-y-4">
        <!-- Content will be populated by JavaScript -->
      </div>

      <div class="flex space-x-3 mt-6">
        <button onclick="closeNotificationModal()" class="btn-secondary flex-1">
          Close
        </button>
        <button onclick="handleNotificationAction()" id="modal-action-btn" class="btn-primary flex-1 hidden">
          Action
        </button>
      </div>
    </div>
  </div>
</div>

<script>
let allNotifications = [];
let currentFilter = 'all';

// Load notifications on page load
document.addEventListener('DOMContentLoaded', function() {
  loadNotifications();
  loadTherapistRequests();
});

// Load notifications from API
async function loadNotifications() {
  try {
    const response = await fetch('/api/notifications');
    const data = await response.json();

    if (data.success) {
      allNotifications = data.notifications;
      renderNotifications();
      updateNotificationCount();
    } else {
      showError('Failed to load notifications');
    }
  } catch (error) {
    console.error('Error loading notifications:', error);
    showError('Failed to load notifications');
  }
}

// Render notifications based on current filter
function renderNotifications() {
  const container = document.getElementById('notifications-container');
  const loadingState = document.getElementById('loading-state');
  const emptyState = document.getElementById('empty-state');

  // Check if elements exist before manipulating them
  if (!container || !loadingState || !emptyState) {
    console.error('Required DOM elements not found for notifications rendering');
    return;
  }

  // Hide loading state
  loadingState.classList.add('hidden');

  // Filter notifications
  let filteredNotifications = allNotifications;
  if (currentFilter === 'unread') {
    filteredNotifications = allNotifications.filter(n => !n.is_read);
  } else if (currentFilter === 'requests') {
    filteredNotifications = allNotifications.filter(n => n.type && n.type.includes('request'));
  } else if (currentFilter === 'appointments') {
    filteredNotifications = allNotifications.filter(n => n.type && n.type.includes('appointment'));
  }

  if (filteredNotifications.length === 0) {
    emptyState.classList.remove('hidden');
    return;
  }

  emptyState.classList.add('hidden');

  // Clear container
  container.innerHTML = '';

  // Render notifications
  filteredNotifications.forEach(notification => {
    const notificationElement = createNotificationElement(notification);
    if (notificationElement) {
      container.appendChild(notificationElement);
    }
  });
}

// Create notification element
function createNotificationElement(notification) {
  try {
    // Validate notification object
    if (!notification || !notification.id || !notification.title || !notification.message) {
      console.error('Invalid notification object:', notification);
      return null;
    }

    const div = document.createElement('div');
    div.className = `bg-white rounded-lg border p-4 hover:shadow-md transition-shadow ${!notification.is_read ? 'border-l-4 border-l-primary bg-blue-50' : 'border-gray-200'}`;

    const timeAgo = formatTimeAgo(new Date(notification.created_at));

    div.innerHTML = `
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <div class="flex items-center mb-2">
            <h4 class="font-semibold text-textMain">${notification.title}</h4>
            ${!notification.is_read ? '<span class="ml-2 bg-primary text-white text-xs px-2 py-1 rounded-full">New</span>' : ''}
          </div>
          <p class="text-gray-700 text-sm mb-2">${notification.message}</p>
          <div class="flex items-center justify-between">
            <span class="text-xs text-gray-500">${timeAgo}</span>
            <div class="flex gap-2">
              ${!notification.is_read ? `<button onclick="markAsRead(${notification.id})" class="text-primary hover:text-primary/80 text-sm">Mark as read</button>` : ''}
              <button onclick="showNotificationDetails(${notification.id})" class="text-gray-500 hover:text-gray-700 text-sm">
                <i class="fas fa-ellipsis-h"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    return div;
  } catch (error) {
    console.error('Error creating notification element:', error, notification);
    return null;
  }
}

// Filter notifications
function filterNotifications(filter) {
  // Update active filter button
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.classList.remove('active', 'bg-primary', 'text-white');
    btn.classList.add('text-gray-600', 'bg-gray-100');
  });

  document.querySelector(`[data-filter="${filter}"]`).classList.add('active', 'bg-primary', 'text-white');
  document.querySelector(`[data-filter="${filter}"]`).classList.remove('text-gray-600', 'bg-gray-100');

  currentFilter = filter;
  renderNotifications();
}

// Mark notification as read
async function markAsRead(notificationId) {
  try {
    const response = await fetch(`/api/notifications/${notificationId}/mark-read`, {
      method: 'POST'
    });

    if (response.ok) {
      // Update local data
      const notification = allNotifications.find(n => n.id === notificationId);
      if (notification) {
        notification.is_read = true;
      }

      // Re-render notifications safely
      try {
        renderNotifications();
        updateNotificationCount();
      } catch (renderError) {
        console.error('Error re-rendering notifications:', renderError);
        // Fallback: reload the page if rendering fails
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    }
  } catch (error) {
    console.error('Error marking notification as read:', error);
  }
}

// Mark all notifications as read
async function markAllAsRead() {
  try {
    const unreadNotifications = allNotifications.filter(n => !n.is_read);
    if (unreadNotifications.length === 0) return;

    // Mark all as read in database
    for (const notification of unreadNotifications) {
      await fetch(`/api/notifications/${notification.id}/mark-read`, {
        method: 'POST'
      });
    }

    // Update local data
    allNotifications.forEach(n => n.is_read = true);
    renderNotifications();
    updateNotificationCount();
  } catch (error) {
    console.error('Error marking all notifications as read:', error);
  }
}

// Update notification count
function updateNotificationCount() {
  const unreadCount = allNotifications.filter(n => !n.is_read).length;
  const countElement = document.getElementById('notification-count');

  if (!countElement) {
    console.error('Notification count element not found');
    return;
  }

  if (unreadCount === 0) {
    countElement.textContent = 'No new notifications';
  } else {
    countElement.textContent = `${unreadCount} new notification${unreadCount > 1 ? 's' : ''}`;
  }
}

// Show notification details modal
function showNotificationDetails(notificationId) {
  const notification = allNotifications.find(n => n.id === notificationId);
  if (!notification) return;

  const modal = document.getElementById('notification-modal');
  const modalTitle = document.getElementById('modal-title');
  const modalContent = document.getElementById('modal-content');
  const modalActionBtn = document.getElementById('modal-action-btn');

  modalTitle.textContent = notification.title;

  modalContent.innerHTML = `
    <p class="text-gray-700">${notification.message}</p>
    <div class="mt-4 pt-4 border-t border-gray-200">
      <p class="text-sm text-gray-500">
        <i class="fas fa-clock mr-2"></i>
        ${formatTimeAgo(new Date(notification.created_at))}
      </p>
    </div>
  `;

  // Show action button for certain notification types
  if (notification.type === 'therapist_request' && notification.is_read === false) {
    modalActionBtn.textContent = 'View Request';
    modalActionBtn.classList.remove('hidden');
    modalActionBtn.onclick = () => {
      closeNotificationModal();
      // Scroll to therapist requests section
      document.getElementById('therapist-requests-section').scrollIntoView({ behavior: 'smooth' });
    };
  } else {
    modalActionBtn.classList.add('hidden');
  }

  modal.classList.remove('hidden');
  modal.classList.add('flex');
}

// Close notification modal
function closeNotificationModal() {
  const modal = document.getElementById('notification-modal');
  modal.classList.add('hidden');
  modal.classList.remove('flex');
}

// Handle notification action
function handleNotificationAction() {
  // This will be implemented based on notification type
  console.log('Handle notification action');
}

// Load therapist requests (for therapists only)
async function loadTherapistRequests() {
  const requestsSection = document.getElementById('therapist-requests-section');
  const requestsContainer = document.getElementById('requests-container');

  try {
    const response = await fetch('/my-requests');
    const data = await response.json();

    if (data.success && data.requests.length > 0) {
      requestsSection.classList.remove('hidden');

      requestsContainer.innerHTML = data.requests.map(request => {
        const requestDate = new Date(request.created_at).toLocaleDateString();
        const respondedDate = request.responded_at ? new Date(request.responded_at).toLocaleDateString() : null;

        let statusBadge = '';
        let actionButtons = '';

        if (request.status === 'approved') {
          statusBadge = '<span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Approved</span>';
          actionButtons = `
            <div class="flex items-center gap-2">
              <span class="text-green-600 text-sm font-medium">âœ“ Approved</span>
              ${respondedDate ? `<span class="text-xs text-gray-500">on ${respondedDate}</span>` : ''}
            </div>
          `;
        } else if (request.status === 'rejected') {
          statusBadge = '<span class="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">Rejected</span>';
          actionButtons = `
            <div class="flex items-center gap-2">
              <span class="text-red-600 text-sm font-medium">âœ— Rejected</span>
              ${respondedDate ? `<span class="text-xs text-gray-500">on ${respondedDate}</span>` : ''}
            </div>
          `;
        } else {
          // Pending request
          statusBadge = '<span class="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">Pending</span>';
          actionButtons = `
            <div class="flex gap-2">
              <button onclick="respondToRequest(${request.id}, 'approve')"
                      class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors">
                <i class="fas fa-check mr-1"></i>Approve
              </button>
              <button onclick="respondToRequest(${request.id}, 'reject')"
                      class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                <i class="fas fa-times mr-1"></i>Reject
              </button>
            </div>
          `;
        }

        return `
          <div class="bg-gray-50 rounded-lg p-4 mb-4 border-l-4 ${request.status === 'approved' ? 'border-l-green-500' : request.status === 'rejected' ? 'border-l-red-500' : 'border-l-yellow-500'}">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center gap-3 mb-2">
                  <h4 class="font-medium text-textMain">${request.patient_name}</h4>
                  ${statusBadge}
                </div>
                <p class="text-sm text-gray-600">${request.patient_email}</p>
                <p class="text-xs text-gray-500 mt-1">
                  Requested on ${requestDate}
                  ${respondedDate ? ` â€¢ Responded on ${respondedDate}` : ''}
                </p>
              </div>
              <div class="flex-shrink-0">
                ${actionButtons}
              </div>
            </div>
          </div>
        `;
      }).join('');
    }
  } catch (error) {
    console.error('Error loading therapist requests:', error);
  }
}

// Respond to therapist request
async function respondToRequest(requestId, action) {
  try {
    const response = await fetch('/respond-request', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ requestId, action })
    });

    const data = await response.json();

    if (data.success) {
      alert(`Request ${action}d successfully!`);
      loadTherapistRequests(); // Reload requests
      loadNotifications(); // Reload notifications
    } else {
      alert(data.error || 'Failed to process request');
    }
  } catch (error) {
    console.error('Error responding to request:', error);
    alert('Failed to process request');
  }
}

// Start admin chat - redirect to appropriate chat interface based on user role
function startAdminChat() {
  // Check if user is a therapist - redirect to dedicated admin chat interface
  const userRole = '<%= user && user.role %>';
  if (userRole === 'therapist') {
    window.location.href = '/therapist/chat?action=admin';
  } else {
    // For patients and others, use the regular chat interface
    window.location.href = '/appointments/chat?admin=true';
  }
}

// Send message to admin
async function sendAdminMessage() {
  const input = document.getElementById('admin-message-input');
  const message = input.value.trim();

  if (!message) return;

  // Add user message to chat
  addMessageToChat('user', message);

  // Clear input
  input.value = '';

  try {
    // Send message to admin (this would typically go to a real admin chat system)
    const response = await fetch('/admin/chat/message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: message,
        userId: '<%= user ? user.id : "anonymous" %>',
        userName: '<%= user ? user.name : "Anonymous" %>'
      })
    });

    if (response.ok) {
      // Simulate admin response after a delay (in a real app, this would be real-time)
      setTimeout(() => {
        addMessageToChat('admin', 'Thank you for your message! Our admin team will respond shortly. For urgent matters, please call our support line at 988.');
      }, 1000);
    } else {
      addMessageToChat('system', 'Failed to send message. Please try again.');
    }
  } catch (error) {
    console.error('Error sending message:', error);
    addMessageToChat('system', 'Failed to send message. Please try again.');
  }
}

// Add message to chat interface
function addMessageToChat(sender, message) {
  const messagesContainer = document.getElementById('chat-messages');

  // Check if chat container exists (it might not be loaded yet)
  if (!messagesContainer) {
    console.warn('Chat messages container not found');
    return;
  }

  const messageDiv = document.createElement('div');

  let messageClass = '';
  let messageHTML = '';

  if (sender === 'user') {
    messageClass = 'flex justify-end';
    messageHTML = `
      <div class="bg-primary text-white rounded-lg px-4 py-2 max-w-xs">
        <p class="text-sm">${message}</p>
        <p class="text-xs opacity-70 mt-1">You â€¢ ${new Date().toLocaleTimeString()}</p>
      </div>
    `;
  } else if (sender === 'admin') {
    messageClass = 'flex justify-start';
    messageHTML = `
      <div class="bg-white border border-gray-200 rounded-lg px-4 py-2 max-w-xs">
        <p class="text-sm text-gray-800">${message}</p>
        <p class="text-xs text-gray-500 mt-1">Admin â€¢ ${new Date().toLocaleTimeString()}</p>
      </div>
    `;
  } else {
    messageClass = 'flex justify-center';
    messageHTML = `
      <div class="text-gray-500 text-xs italic">
        ${message}
      </div>
    `;
  }

  messageDiv.className = messageClass;
  messageDiv.innerHTML = messageHTML;
  messagesContainer.appendChild(messageDiv);

  // Scroll to bottom
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Handle Enter key in chat input
document.addEventListener('DOMContentLoaded', function() {
  const chatInput = document.getElementById('admin-message-input');
  if (chatInput) {
    chatInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendAdminMessage();
      }
    });
  }
});

// Utility functions
function formatTimeAgo(date) {
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);

  if (diffInSeconds < 60) return 'Just now';
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
  return date.toLocaleDateString();
}

function showError(message) {
  const container = document.getElementById('notifications-container');
  container.innerHTML = `
    <div class="text-center py-12">
      <div class="w-24 h-24 bg-red-100 rounded-full mx-auto mb-6 flex items-center justify-center">
        <i class="fas fa-exclamation-triangle text-3xl text-red-400"></i>
      </div>
      <h3 class="text-xl font-medium text-gray-600 mb-2">Error</h3>
      <p class="text-gray-500">${message}</p>
    </div>
  `;
}
</script>