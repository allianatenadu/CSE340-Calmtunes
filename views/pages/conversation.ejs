<!-- Enhanced conversation.ejs with Admin Chat Integration -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="mb-8">
    <h1 class="text-3xl md:text-4xl font-bold text-textMain mb-4">
      ðŸ’¬ Messages & Support
    </h1>
    <p class="text-xl text-gray-900">
      <% if (user.role === 'admin') { %> Your admin conversations with patients
      and therapists <% } else if (user.role === 'therapist') { %> Your
      conversations with patients and admin support <% } else { %> Chat with
      your therapist and get admin support for any concerns <% } %>
    </p>
  </div>

  <!-- Quick Actions Bar -->
  <div class="bg-white rounded-xl shadow-md mb-6 p-4">
    <div class="flex flex-wrap gap-3 items-center justify-between">
      <div class="flex flex-wrap gap-3">
        <% if (user.role === 'patient') { %>
        <a href="/find-therapist" class="btn-primary">
          <i class="fas fa-search mr-2"></i>Find Therapist
        </a>
        <button onclick="startAdminSupport()" class="btn-secondary">
          <i class="fas fa-headset mr-2"></i>Get Admin Support
        </button>
        <% } else if (user.role === 'therapist') { %>
        <div class="flex items-center gap-2">
          <span class="text-sm font-medium text-gray-600">Chat Mode:</span>
          <button
            onclick="switchToPatientChat()"
            id="patient-chat-btn"
            class="btn-primary"
          >
            <i class="fas fa-users mr-2"></i>My Patients
          </button>
          <button
            onclick="switchToAdminChat()"
            id="admin-chat-btn"
            class="btn-secondary"
          >
            <i class="fas fa-headset mr-2"></i>Contact Admin
          </button>
        </div>
        <% } else if (user.role === 'admin') { %>
        <button onclick="showPatientsModal()" class="btn-primary">
          <i class="fas fa-users mr-2"></i>Chat with Patient
        </button>
        <button onclick="showTherapistsModal()" class="btn-secondary">
          <i class="fas fa-user-md mr-2"></i>Chat with Therapist
        </button>
        <a href="/admin" class="btn-outline">
          <i class="fas fa-cog mr-2"></i>Admin Panel
        </a>
        <% } %>
      </div>

      <!-- Connection Status -->
      <div
        id="connection-status"
        class="flex items-center text-sm text-gray-900"
      >
        <div
          id="status-indicator"
          class="w-2 h-2 rounded-full bg-gray-400 mr-2"
        ></div>
        <span id="status-text">Connecting...</span>
      </div>
    </div>
  </div>

  <!-- Conversations List -->
  <div id="conversations-container" class="bg-white rounded-xl shadow-md">
    <div class="p-6 border-b border-gray-200">
      <div class="flex items-center justify-between">
        <div>
          <h2 class="text-xl font-semibold text-textMain">
            Active Conversations
          </h2>
          <p class="text-sm text-gray-900 mt-1">
            Your recent messages and support chats
          </p>
        </div>
        <button
          onclick="refreshConversations()"
          class="text-gray-500 hover:text-gray-700"
          title="Refresh conversations"
        >
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
    </div>

    <div id="conversations-list" class="divide-y divide-gray-200">
      <!-- Conversations will be loaded here -->
    </div>

    <div id="no-conversations" class="text-center py-12 hidden">
      <div
        class="w-24 h-24 bg-gray-100 rounded-full mx-auto mb-6 flex items-center justify-center"
      >
        <i class="fas fa-comments text-3xl text-gray-400"></i>
      </div>
      <h3 class="text-xl font-medium text-gray-900 mb-2">
        No Conversations Yet
      </h3>
      <p class="text-gray-500 mb-6">
        <% if (user.role === 'patient') { %> Start by finding a therapist or
        contacting admin support for any concerns. <% } else if (user.role ===
        'therapist') { %> Your patient conversations and admin support will
        appear here. <% } else { %> Start conversations with patients or
        therapists to provide support. <% } %>
      </p>
      <div class="space-y-3">
        <% if (user.role === 'patient') { %>
        <a href="/find-therapist" class="btn-primary inline-block">
          <i class="fas fa-search mr-2"></i>Find a Therapist
        </a>
        <button onclick="startAdminSupport()" class="btn-secondary ml-3">
          <i class="fas fa-headset mr-2"></i>Get Support
        </button>
        <% } else if (user.role === 'admin') { %>
        <button onclick="showPatientsModal()" class="btn-primary">
          <i class="fas fa-users mr-2"></i>Start Patient Chat
        </button>
        <% } %>
      </div>
    </div>

    <div id="loading-conversations" class="text-center py-8">
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"
      ></div>
      <p class="text-gray-900 mt-2">Loading conversations...</p>
    </div>
  </div>

  <!-- Chat View - Hidden by default -->
  <div id="chat-view" class="hidden bg-white rounded-xl shadow-md mt-6">
    <div class="p-6 border-b border-gray-200">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <button onclick="backToConversations()" class="btn-secondary mr-4">
            <i class="fas fa-arrow-left mr-2"></i>Back to Messages
          </button>
          <div id="chat-header" class="flex items-center">
            <!-- Chat header will be populated by JavaScript -->
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <!-- Refresh Messages Button -->
          <button
            onclick="refreshMessages()"
            class="btn-secondary px-3 py-2"
            title="Refresh messages"
          >
            <i class="fas fa-sync-alt"></i>
          </button>

          <!-- Admin-specific action buttons -->
          <% if (user.role === 'admin') { %>
          <button
            id="patient-concern-btn"
            onclick="showPatientConcernModal()"
            class="btn-secondary px-4 py-2 hidden"
          >
            <i class="fas fa-exclamation-triangle mr-2"></i>Submit Concern
          </button>
          <button
            id="therapist-contract-btn"
            onclick="showTherapistContractModal()"
            class="btn-secondary px-4 py-2 hidden"
          >
            <i class="fas fa-file-contract mr-2"></i>Send Contract
          </button>
          <button
            id="close-conversation-btn"
            onclick="closeConversation()"
            class="btn-danger px-4 py-2"
          >
            <i class="fas fa-times mr-2"></i>Close Chat
          </button>
          <% } else { %>
          <button
            id="phone-call-btn"
            onclick="startPhoneCall()"
            class="btn-secondary px-4 py-2"
          >
            <i class="fas fa-phone mr-2"></i>Phone Call
          </button>
          <button
            id="video-call-btn"
            onclick="startVideoCall()"
            class="btn-primary px-4 py-2"
          >
            <i class="fas fa-video mr-2"></i>Video Call
          </button>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Messages Container -->
    <div
      id="messages-container"
      class="h-96 overflow-y-auto bg-gray-50 p-4 space-y-4"
    >
      <div class="text-center text-gray-500 py-8" id="chat-loading">
        <div
          class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary mr-2"
        ></div>
        <span class="text-gray-900">Loading messages...</span>
      </div>
    </div>

    <!-- Message Input Form -->
    <form id="message-form" class="p-6 border-t border-gray-200 hidden">
      <div class="flex space-x-2">
        <input
          type="text"
          id="message-input"
          placeholder="Type a message..."
          class="flex-1 form-input rounded-lg border-gray-300"
          required
        />
        <button type="submit" class="btn-primary px-6" id="send-btn">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
      <div id="typing-indicator" class="mt-2 text-sm text-gray-900 hidden">
        <i class="fas fa-ellipsis-h animate-pulse mr-1"></i>
        <span id="typing-user">Someone</span> is typing...
      </div>
    </form>
  </div>

  <!-- Admin Support Modal for Patients -->
  <div
    id="admin-support-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Get Admin Support</h3>
          <button
            onclick="closeAdminSupportModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div class="p-6">
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
          <div class="flex items-start">
            <i class="fas fa-info-circle text-blue-600 mr-3 mt-1"></i>
            <div>
              <h4 class="font-medium text-blue-800 mb-1">
                How can we help you?
              </h4>
              <p class="text-blue-700 text-sm">
                Our admin team is here to assist with technical issues, account
                problems, therapist concerns, or any questions about the
                platform.
              </p>
            </div>
          </div>
        </div>

        <form id="admin-support-form" onsubmit="submitAdminSupport(event)">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-900 mb-2"
              >What do you need help with?</label
            >
            <select
              id="support-type"
              name="supportType"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              required
            >
              <option value="">Select issue type</option>
              <option value="technical">Technical Issue</option>
              <option value="therapist">Therapist Related</option>
              <option value="billing">Billing Question</option>
              <option value="account">Account Problem</option>
              <option value="platform">Platform Question</option>
              <option value="other">Other</option>
            </select>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Describe your issue</label
            >
            <textarea
              id="support-message"
              name="message"
              rows="4"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              placeholder="Please provide details about your concern or question..."
              required
            ></textarea>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeAdminSupportModal()"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <i class="fas fa-paper-plane mr-2"></i>Send Message
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Therapist-Admin Chat Modal (Enhanced Interface) -->
  <div
    id="therapist-admin-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <div>
            <h3 class="text-lg font-semibold">Contact Admin Team</h3>
            <p class="text-sm text-gray-900 mt-1">
              Start a conversation with our admin support team
            </p>
          </div>
          <button
            onclick="closeTherapistAdminModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div class="p-6">
        <div
          class="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-lg p-4 mb-4"
        >
          <div class="flex items-start">
            <div
              class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3"
            >
              <i class="fas fa-headset text-white text-lg"></i>
            </div>
            <div>
              <h4 class="font-medium text-blue-800 mb-1">Admin Support Team</h4>
              <p class="text-blue-700 text-sm">
                Our admin team is here to help with any questions, concerns, or
                issues you may have. This will open a private chat just like
                your patient conversations.
              </p>
            </div>
          </div>
        </div>

        <form
          id="therapist-admin-form"
          onsubmit="submitTherapistAdminMessage(event)"
        >
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >What would you like to discuss?</label
            >
            <textarea
              id="therapist-admin-message"
              name="message"
              rows="4"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              placeholder="Describe what you need help with, or just say 'Hello' to start the conversation..."
              required
            ></textarea>
          </div>

          <div class="bg-gray-50 rounded-lg p-3 mb-4">
            <div class="flex items-start">
              <i class="fas fa-info-circle text-gray-500 mr-2 mt-0.5"></i>
              <div class="text-sm text-gray-600">
                <p class="font-medium mb-1">What happens next?</p>
                <p>
                  After sending this message, you'll be taken to a full chat
                  interface where you can have a normal conversation with the
                  admin team, just like chatting with your patients.
                </p>
              </div>
            </div>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeTherapistAdminModal()"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700"
            >
              <i class="fas fa-comments mr-2"></i>Start Chat
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Patient Concern Modal (Admin Only) -->
  <div
    id="patient-concern-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Submit Patient Concern</h3>
          <button
            onclick="closePatientConcernModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <form
        id="patient-concern-form"
        onsubmit="submitPatientConcern(event)"
        class="p-6"
      >
        <input type="hidden" id="concern-patient-id" name="patientId" />
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Concern Type</label
            >
            <select
              id="concern-type"
              name="concernType"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              required
            >
              <option value="">Select type</option>
              <option value="technical">Technical Issue</option>
              <option value="therapist">Therapist Related</option>
              <option value="platform">Platform Issue</option>
              <option value="billing">Billing Issue</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Severity</label
            >
            <select
              id="concern-severity"
              name="severity"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              required
            >
              <option value="">Select severity</option>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
              <option value="critical">Critical</option>
            </select>
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2"
            >Title</label
          >
          <input
            type="text"
            id="concern-title"
            name="title"
            class="w-full border border-gray-300 rounded-lg px-4 py-2"
            placeholder="Brief description of the concern"
            required
          />
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2"
            >Description</label
          >
          <textarea
            id="concern-description"
            name="description"
            rows="4"
            class="w-full border border-gray-300 rounded-lg px-4 py-2"
            placeholder="Detailed description of the concern"
            required
          ></textarea>
        </div>
        <div class="flex justify-end space-x-3">
          <button
            type="button"
            onclick="closePatientConcernModal()"
            class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
          >
            Submit Concern
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Therapist Contract Modal (Admin Only) -->
  <div
    id="therapist-contract-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div class="bg-white rounded-lg max-w-2xl w-full mx-4">
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Send Contract to Therapist</h3>
          <button
            onclick="closeTherapistContractModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <form
        id="therapist-contract-form"
        onsubmit="submitTherapistContract(event)"
        class="p-6"
      >
        <input type="hidden" id="contract-therapist-id" name="therapistId" />
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Contract Type</label
            >
            <select
              id="contract-type"
              name="contractType"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
              required
            >
              <option value="">Select type</option>
              <option value="terms_update">Terms Update</option>
              <option value="policy_change">Policy Change</option>
              <option value="guidelines">Guidelines</option>
              <option value="requirements">Requirements</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Acknowledgment Required</label
            >
            <select
              id="requires-acknowledgment"
              name="requiresAcknowledgment"
              class="w-full border border-gray-300 rounded-lg px-4 py-2"
            >
              <option value="true">Yes</option>
              <option value="false">No</option>
            </select>
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2"
            >Title</label
          >
          <input
            type="text"
            id="contract-title"
            name="title"
            class="w-full border border-gray-300 rounded-lg px-4 py-2"
            placeholder="Contract title"
            required
          />
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2"
            >Content</label
          >
          <textarea
            id="contract-content"
            name="content"
            rows="6"
            class="w-full border border-gray-300 rounded-lg px-4 py-2"
            placeholder="Contract content and details"
            required
          ></textarea>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2"
            >Acknowledgment Deadline (Optional)</label
          >
          <input
            type="datetime-local"
            id="acknowledgment-deadline"
            name="acknowledgmentDeadline"
            class="w-full border border-gray-300 rounded-lg px-4 py-2"
          />
        </div>
        <div class="flex justify-end space-x-3">
          <button
            type="button"
            onclick="closeTherapistContractModal()"
            class="px-4 py-2 text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Send Contract
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Patients Modal (Admin Only) -->
  <div
    id="patients-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div
      class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-96 overflow-y-auto"
    >
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Select Patient to Chat With</h3>
          <button
            onclick="closePatientsModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div id="patients-list" class="p-6">
        <div class="text-center text-gray-500">
          <i class="fas fa-spinner fa-spin mb-2"></i>
          <p class="text-gray-900">Loading patients...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Therapists Modal (Admin Only) -->
  <div
    id="therapists-modal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50"
  >
    <div
      class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-96 overflow-y-auto"
    >
      <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Select Therapist to Chat With</h3>
          <button
            onclick="closeTherapistsModal()"
            class="text-gray-500 hover:text-gray-700"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div id="therapists-list" class="p-6">
        <div class="text-center text-gray-500">
          <i class="fas fa-spinner fa-spin mb-2"></i>
          <p class="text-gray-900">Loading therapists...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div
    id="toast-notification"
    class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 hidden transform transition-all duration-300"
  >
    <div class="flex items-center">
      <i class="fas fa-check-circle mr-2"></i>
      <span id="toast-message">Action completed successfully!</span>
    </div>
  </div>
</div>

<!-- Socket.IO Client -->
<script src="/socket.io/socket.io.js"></script>

<!-- Enhanced Chat JavaScript with Admin Support -->
<script>
  // Global variables
  let conversations = [];
  let currentConversationId = null;
  let messages = [];
  let otherUser = {};
  let socket = null;
  let isPageVisible = true;
  let messagePollingInterval = null;
  let conversationPollingInterval = null;
  let lastMessageCount = 0;
  let typingTimer = null;
  let currentUserId = "<%= user.id %>";
  let userRole = "<%= user.role %>";

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", function () {
    console.log("Initializing enhanced chat with admin support");

    // Initialize Socket.IO
    initializeSocket();

    // Load conversations
    loadConversations();

    // Set up event listeners
    setupEventListeners();

    // Handle direct conversation loading from URL
    const conversationId =
      '<%= typeof conversationId !== "undefined" ? conversationId || "" : "" %>';
    if (conversationId && conversationId.trim() !== "") {
      currentConversationId = conversationId;
      document
        .getElementById("conversations-container")
        .classList.add("hidden");
      document.getElementById("chat-view").classList.remove("hidden");
      loadChat(conversationId);
    }
  });

  // Initialize Socket.IO connection
  function initializeSocket() {
    console.log("Initializing Socket.IO connection...");
    socket = io();

    socket.on("connect", () => {
      console.log("Socket connected:", socket.id);
      updateConnectionStatus(true);

      // Authenticate socket connection
      socket.emit("authenticate", { userId: currentUserId, role: userRole });
    });

    socket.on("disconnect", () => {
      console.log("Socket disconnected");
      updateConnectionStatus(false);
    });

    socket.on("connect_error", (error) => {
      console.error("Socket connection error:", error);
      updateConnectionStatus(false);
    });

    socket.on("new_message", (data) => {
      console.log("New message received via socket:", data);
      console.log("Current conversation ID:", currentConversationId);

      if (
        data &&
        data.conversationId === currentConversationId &&
        data.message
      ) {
        console.log("Message is for current conversation, processing...");

        // Enhanced duplicate detection to avoid duplicates
        const messageExists = messages.some(
          (msg) => msg.id === data.message.id
        );

        // Additional check: if message exists and was sent by current user very recently, ignore it
        const isRecentOwnMessage = messages.some(
          (msg) =>
            msg.id === data.message.id &&
            msg.sender_id === currentUserId &&
            data.message.created_at &&
            msg.created_at &&
            Math.abs(
              new Date(data.message.created_at) - new Date(msg.created_at)
            ) < 5000 // 5 seconds
        );

        console.log("Message exists:", messageExists);
        console.log("Is recent own message:", isRecentOwnMessage);

        if (!messageExists || !isRecentOwnMessage) {
          console.log("Adding new message to array");
          messages.push(data.message);
          console.log("Messages array after push:", messages);
          displayMessages();
          showToast("New message received");

          // Scroll to bottom to show new message
          const container = document.getElementById("messages-container");
          if (container) {
            setTimeout(() => {
              container.scrollTop = container.scrollHeight;
              console.log("Scrolled after socket message");
            }, 100);
          }
        } else {
          console.log("Duplicate message ignored:", data.message.id, {
            messageExists,
            isRecentOwnMessage,
          });
        }
      } else if (data && data.conversationId !== currentConversationId) {
        console.log("Message for different conversation, updating list");
        // Update conversation list for unread count
        loadConversations();
      } else {
        console.log("Invalid socket message data:", data);
      }
    });

    socket.on("user_typing", (data) => {
      if (
        data.conversationId === currentConversationId &&
        data.userId !== currentUserId
      ) {
        showTypingIndicator(data.userName || "Someone");
      }
    });

    socket.on("user_stopped_typing", (data) => {
      if (data.conversationId === currentConversationId) {
        hideTypingIndicator();
      }
    });
  }

  // Set up event listeners
  function setupEventListeners() {
    // Message form submission
    const messageForm = document.getElementById("message-form");
    if (messageForm) {
      messageForm.addEventListener("submit", sendMessage);
      console.log("Message form listener attached");
    } else {
      console.error("Message form not found!");
    }

    // Typing detection
    const messageInput = document.getElementById("message-input");
    if (messageInput) {
      messageInput.addEventListener("input", handleTyping);
      messageInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          sendMessage(e);
        }
      });
    }

    // Page visibility change
    document.addEventListener("visibilitychange", () => {
      isPageVisible = !document.hidden;
    });
  }

  // Update connection status indicator
  function updateConnectionStatus(connected) {
    const indicator = document.getElementById("status-indicator");
    const text = document.getElementById("status-text");

    if (connected) {
      indicator.className = "w-2 h-2 rounded-full bg-green-400 mr-2";
      text.textContent = "Connected";
    } else {
      indicator.className = "w-2 h-2 rounded-full bg-red-400 mr-2";
      text.textContent = "Disconnected";
    }
  }

  // Load conversations from server
  async function loadConversations() {
    const loadingElement = document.getElementById("loading-conversations");
    const conversationsList = document.getElementById("conversations-list");
    const noConversations = document.getElementById("no-conversations");

    if (loadingElement) loadingElement.classList.remove("hidden");

    try {
      // Use appropriate endpoint based on user role
      const endpoint =
        userRole === "admin"
          ? "/admin/chat/conversations"
          : "/appointments/chat/conversations";
      const response = await fetch(endpoint, {
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();

      if (data.success) {
        conversations = data.conversations || [];
        displayConversations();
      } else {
        console.error("Failed to load conversations:", data.error);
        showNoConversations();
      }
    } catch (error) {
      console.error("Error loading conversations:", error);
      showNoConversations();
    } finally {
      if (loadingElement) loadingElement.classList.add("hidden");
    }
  }

  // Display conversations list with admin conversation indicators
  function displayConversations() {
    const container = document.getElementById("conversations-list");
    const noConversations = document.getElementById("no-conversations");

    if (!conversations || conversations.length === 0) {
      container.innerHTML = "";
      noConversations.classList.remove("hidden");
      return;
    }

    noConversations.classList.add("hidden");

    container.innerHTML = conversations
      .map((conversation) => {
        const isAdmin = userRole === "admin";
        const isAdminConversation = conversation.conversation_type === "admin";

        // Determine other user based on conversation type and current user role
        let otherUser;
        if (isAdminConversation) {
          if (userRole === "admin") {
            // Admin viewing patient's admin support request
            otherUser = {
              name: conversation.patient_name || "Patient",
              image: conversation.patient_image,
              role: "patient",
              specialty: "Patient Support",
            };
          } else {
            // Patient viewing admin support conversation
            otherUser = {
              name: "Admin Support",
              image: null,
              role: "admin",
              specialty: "CalmTunes Admin Team",
            };
          }
        } else {
          // Regular patient-therapist conversation
          if (userRole === "patient") {
            otherUser = {
              name: conversation.therapist_name || "Therapist",
              image: conversation.therapist_image,
              role: "therapist",
              specialty: conversation.specialty || "General Practice",
            };
          } else {
            otherUser = {
              name: conversation.patient_name || "Patient",
              image: conversation.patient_image,
              role: "patient",
              specialty: "Patient",
            };
          }
        }

        const imageUrl =
          otherUser.image && !otherUser.image.startsWith("http")
            ? `/uploads/${otherUser.image}`
            : otherUser.image;

        const lastMessageTime = conversation.last_message_time
          ? formatMessageTime(conversation.last_message_time)
          : formatMessageTime(conversation.created_at);

        const unreadCount = parseInt(conversation.unread_count) || 0;

        // Admin conversation badge
        const adminBadge = isAdminConversation
          ? '<span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full ml-2"><i class="fas fa-headset mr-1"></i>Support</span>'
          : "";

        return `
      <div class="p-6 hover:bg-gray-50 cursor-pointer transition-colors border-l-4 ${
        isAdminConversation
          ? "border-blue-500 bg-blue-50/30"
          : "border-transparent"
      }"
           onclick="openConversation('${conversation.id}')">
        <div class="flex items-center justify-between">
          <div class="flex items-center flex-1">
            ${
              imageUrl
                ? `<img src="${imageUrl}" alt="${otherUser.name}" class="w-12 h-12 rounded-full object-cover mr-4">`
                : `<div class="w-12 h-12 bg-gradient-to-br ${
                    isAdminConversation
                      ? "from-blue-500 to-purple-600"
                      : "from-blue-400 to-purple-500"
                  } rounded-full flex items-center justify-center mr-4">
                ${
                  isAdminConversation
                    ? '<i class="fas fa-headset text-white"></i>'
                    : `<span class="text-white font-semibold">${otherUser.name
                        .charAt(0)
                        .toUpperCase()}</span>`
                }
              </div>`
            }
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <h3 class="font-semibold text-textMain truncate">${escapeHtml(
                    otherUser.name
                  )}</h3>
                  ${adminBadge}
                </div>
                <div class="flex items-center space-x-2 ml-2">
                  ${
                    unreadCount > 0
                      ? `<span class="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                      ${unreadCount > 99 ? "99+" : unreadCount}
                    </span>`
                      : ""
                  }
                  <span class="text-sm text-gray-500">${lastMessageTime}</span>
                </div>
              </div>
              ${
                otherUser.specialty
                  ? `<p class="text-sm ${
                      isAdminConversation ? "text-blue-600" : "text-gray-500"
                    } mb-1">${escapeHtml(otherUser.specialty)}</p>`
                  : ""
              }
              <p class="text-gray-600 truncate">
                ${conversation.last_message || "No messages yet"}
              </p>
            </div>
          </div>
          <div class="ml-4">
            <i class="fas fa-chevron-right text-gray-400"></i>
          </div>
        </div>
      </div>
    `;
      })
      .join("");
  }

  // Rest of the JavaScript functions would continue here...
  // Including loadChat, sendMessage, displayMessages, etc.

  // Utility functions
  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  function formatMessageTime(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now - date;

    if (diff < 24 * 60 * 60 * 1000) {
      return date.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });
    }

    if (diff < 7 * 24 * 60 * 60 * 1000) {
      return date.toLocaleDateString([], { weekday: "short" });
    }

    return date.toLocaleDateString([], { month: "short", day: "numeric" });
  }

  function showToast(message) {
    const toast = document.getElementById("toast-notification");
    const messageEl = document.getElementById("toast-message");

    messageEl.textContent = message;
    toast.classList.remove("hidden");

    setTimeout(() => {
      toast.classList.add("hidden");
    }, 3000);
  }

  // Admin Support Functions for Patients
  function startAdminSupport() {
    document.getElementById("admin-support-modal").classList.remove("hidden");
    document.getElementById("admin-support-modal").classList.add("flex");
  }

  function closeAdminSupportModal() {
    document.getElementById("admin-support-modal").classList.add("hidden");
    document.getElementById("admin-support-modal").classList.remove("flex");
  }

  async function submitAdminSupport(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);

    const supportData = {
      participantId: currentUserId,
      participantType: "patient",
      message: `Support Request (${formData.get(
        "supportType"
      )}): ${formData.get("message")}`,
    };

    try {
      const response = await fetch("/support/start", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(supportData),
      });

      const data = await response.json();

      if (data.success) {
        closeAdminSupportModal();
        showToast("Support request sent! Admin will respond soon.");

        // Refresh conversations to show new admin chat
        setTimeout(() => {
          loadConversations();
        }, 1000);

        // Optionally redirect to the conversation
        if (data.conversationId) {
          setTimeout(() => {
            openConversation(data.conversationId);
          }, 2000);
        }
      } else {
        showToast(data.error || "Failed to send support request", "error");
      }
    } catch (error) {
      console.error("Error submitting admin support:", error);
      showToast("Failed to send support request", "error");
    }
  }

  // Contact Admin Function for Therapists (Enhanced)
  function contactAdmin() {
    document.getElementById("therapist-admin-modal").classList.remove("hidden");
    document.getElementById("therapist-admin-modal").classList.add("flex");
    document.getElementById("therapist-admin-message").focus();
  }

  function closeTherapistAdminModal() {
    document.getElementById("therapist-admin-modal").classList.add("hidden");
    document.getElementById("therapist-admin-modal").classList.remove("flex");
    document.getElementById("therapist-admin-form").reset();
  }

  async function submitTherapistAdminMessage(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);
    const message = formData.get("message").trim();

    if (!message) {
      showToast("Please enter a message", "error");
      return;
    }

    try {
      // Use the support endpoint instead of admin endpoint
      const response = await fetch("/support/start", {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: message }),
      });

      if (!response.ok) {
        const text = await response.text();
        console.error("Response not OK:", response.status, text);
        throw new Error(`Failed to start chat (${response.status})`);
      }

      const data = await response.json();

      if (data.success) {
        closeTherapistAdminModal();
        showToast("Chat started with admin team!");

        // Refresh conversations
        await loadConversations();

        // Open the conversation after a delay
        if (data.conversationId) {
          setTimeout(() => {
            openConversation(data.conversationId);
          }, 1000);
        }
      } else {
        showToast(data.error || "Failed to start admin chat", "error");
      }
    } catch (error) {
      console.error("Error starting admin chat:", error);
      showToast("Failed to start admin chat: " + error.message, "error");
    }
  }

  // Admin Functions for Patient Concerns
  function showPatientConcernModal() {
    if (!otherUser || otherUser.role !== "patient") {
      showToast(
        "This feature is only available when chatting with patients",
        "error"
      );
      return;
    }

    document.getElementById("concern-patient-id").value = otherUser.id;
    document.getElementById("patient-concern-modal").classList.remove("hidden");
    document.getElementById("patient-concern-modal").classList.add("flex");
  }

  function closePatientConcernModal() {
    document.getElementById("patient-concern-modal").classList.add("hidden");
    document.getElementById("patient-concern-modal").classList.remove("flex");
  }

  async function submitPatientConcern(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);

    const concernData = {
      patientId: formData.get("patientId"),
      concernType: formData.get("concernType"),
      severity: formData.get("severity"),
      title: formData.get("title"),
      description: formData.get("description"),
    };

    try {
      const response = await fetch("/admin/submit-patient-concern", {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(concernData),
      });

      const data = await response.json();

      if (data.success) {
        closePatientConcernModal();
        showToast("Patient concern submitted successfully");
        form.reset();
      } else {
        showToast(data.error || "Failed to submit concern", "error");
      }
    } catch (error) {
      console.error("Error submitting patient concern:", error);
      showToast("Failed to submit concern", "error");
    }
  }

  // Admin Functions for Therapist Contracts
  function showTherapistContractModal() {
    if (!otherUser || otherUser.role !== "therapist") {
      showToast(
        "This feature is only available when chatting with therapists",
        "error"
      );
      return;
    }

    document.getElementById("contract-therapist-id").value = otherUser.id;
    document
      .getElementById("therapist-contract-modal")
      .classList.remove("hidden");
    document.getElementById("therapist-contract-modal").classList.add("flex");
  }

  function closeTherapistContractModal() {
    document.getElementById("therapist-contract-modal").classList.add("hidden");
    document
      .getElementById("therapist-contract-modal")
      .classList.remove("flex");
  }

  async function submitTherapistContract(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);

    const contractData = {
      therapistId: formData.get("therapistId"),
      contractType: formData.get("contractType"),
      title: formData.get("title"),
      content: formData.get("content"),
      requiresAcknowledgment: formData.get("requiresAcknowledgment") === "true",
      acknowledgmentDeadline: formData.get("acknowledgmentDeadline") || null,
    };

    try {
      const response = await fetch("/admin/send-therapist-contract", {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(contractData),
      });

      const data = await response.json();

      if (data.success) {
        closeTherapistContractModal();
        showToast("Contract sent to therapist successfully");
        form.reset();
      } else {
        showToast(data.error || "Failed to send contract", "error");
      }
    } catch (error) {
      console.error("Error sending therapist contract:", error);
      showToast("Failed to send contract", "error");
    }
  }

  // Admin Modals for Patient/Therapist Selection
  async function showPatientsModal() {
    document.getElementById("patients-modal").classList.remove("hidden");
    document.getElementById("patients-modal").classList.add("flex");

    try {
      const response = await fetch("/admin/chat/patients", {
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();

      if (data.success) {
        displayPatientsList(data.patients || []);
      } else {
        showToast("Failed to load patients", "error");
      }
    } catch (error) {
      console.error("Error loading patients:", error);
      showToast("Error loading patients", "error");
    }
  }

  function closePatientsModal() {
    document.getElementById("patients-modal").classList.add("hidden");
    document.getElementById("patients-modal").classList.remove("flex");
  }

  function displayPatientsList(patients) {
    const container = document.getElementById("patients-list");

    if (patients.length === 0) {
      container.innerHTML = `
      <div class="text-center text-gray-500 py-8">
        <i class="fas fa-users text-4xl mb-2"></i>
        <p>No patients found</p>
      </div>
    `;
      return;
    }

    container.innerHTML = patients
      .map(
        (patient) => `
    <div class="patient-item p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer mb-3"
         onclick="startChatWithPatient('${patient.id}', '${escapeHtml(
          patient.name
        )}')">
      <div class="flex items-center">
        <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mr-4">
          ${
            patient.profile_image
              ? `<img src="/uploads/${patient.profile_image}" alt="${patient.name}" class="w-12 h-12 rounded-full object-cover">`
              : '<i class="fas fa-user text-green-600"></i>'
          }
        </div>
        <div class="flex-1">
          <h4 class="font-medium text-gray-900">${escapeHtml(patient.name)}</h4>
          <p class="text-sm text-gray-600">${escapeHtml(patient.email)}</p>
          <div class="flex items-center mt-1 text-xs text-gray-500">
            <span>Joined: ${new Date(
              patient.created_at
            ).toLocaleDateString()}</span>
            ${
              patient.appointment_count > 0
                ? `<span class="ml-3">${patient.appointment_count} appointments</span>`
                : ""
            }
          </div>
        </div>
      </div>
    </div>
  `
      )
      .join("");
  }

  async function showTherapistsModal() {
    document.getElementById("therapists-modal").classList.remove("hidden");
    document.getElementById("therapists-modal").classList.add("flex");

    try {
      const response = await fetch("/admin/chat/therapists", {
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await response.json();

      if (data.success) {
        displayTherapistsList(data.therapists || []);
      } else {
        showToast("Failed to load therapists", "error");
      }
    } catch (error) {
      console.error("Error loading therapists:", error);
      showToast("Error loading therapists", "error");
    }
  }

  function closeTherapistsModal() {
    document.getElementById("therapists-modal").classList.add("hidden");
    document.getElementById("therapists-modal").classList.remove("flex");
  }

  function displayTherapistsList(therapists) {
    const container = document.getElementById("therapists-list");

    if (therapists.length === 0) {
      container.innerHTML = `
      <div class="text-center text-gray-500 py-8">
        <i class="fas fa-user-md text-4xl mb-2"></i>
        <p>No therapists found</p>
      </div>
    `;
      return;
    }

    container.innerHTML = therapists
      .map(
        (therapist) => `
    <div class="therapist-item p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer mb-3"
         onclick="startChatWithTherapist('${therapist.id}', '${escapeHtml(
          therapist.name
        )}')">
      <div class="flex items-center">
        <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4">
          ${
            therapist.profile_image
              ? `<img src="/uploads/${therapist.profile_image}" alt="${therapist.name}" class="w-12 h-12 rounded-full object-cover">`
              : '<i class="fas fa-user-md text-blue-600"></i>'
          }
        </div>
        <div class="flex-1">
          <h4 class="font-medium text-gray-900">${escapeHtml(
            therapist.name
          )}</h4>
          <p class="text-sm text-blue-600">${escapeHtml(
            therapist.specialty || "General Practice"
          )}</p>
          <p class="text-sm text-gray-600">${escapeHtml(therapist.email)}</p>
          <div class="flex items-center mt-1 text-xs text-gray-500">
            <span>Joined: ${new Date(
              therapist.created_at
            ).toLocaleDateString()}</span>
            ${
              therapist.patient_count > 0
                ? `<span class="ml-3">${therapist.patient_count} patients</span>`
                : ""
            }
          </div>
        </div>
      </div>
    </div>
  `
      )
      .join("");
  }

  // Start Chat Functions
  async function startChatWithPatient(patientId, patientName) {
    closePatientsModal();

    try {
      const response = await fetch("/admin/chat/start", {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          participantId: patientId,
          participantType: "patient",
          message: `Hello ${patientName}, this is ${
            userRole === "admin" ? "Admin" : "Support"
          } from CalmTunes. How can I help you today?`,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        showToast("Chat started with patient");
        loadConversations();

        if (data.conversationId) {
          setTimeout(() => {
            openConversation(data.conversationId);
          }, 1000);
        }
      } else {
        showToast(data.error || "Failed to start chat", "error");
      }
    } catch (error) {
      console.error("Error starting chat with patient:", error);
      showToast("Failed to start chat", "error");
    }
  }

  async function startChatWithTherapist(therapistId, therapistName) {
    closeTherapistsModal();

    try {
      const response = await fetch("/admin/chat/start", {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          participantId: therapistId,
          participantType: "therapist",
          message: `Hello ${therapistName}, this is ${
            userRole === "admin" ? "Admin" : "Support"
          } from CalmTunes. I wanted to check in with you. How are things going?`,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.success) {
        showToast("Chat started with therapist");
        loadConversations();

        if (data.conversationId) {
          setTimeout(() => {
            openConversation(data.conversationId);
          }, 1000);
        }
      } else {
        showToast(data.error || "Failed to start chat", "error");
      }
    } catch (error) {
      console.error("Error starting chat with therapist:", error);
      showToast("Failed to start chat", "error");
    }
  }

  // Core Chat Functions
  function openConversation(conversationId) {
    currentConversationId = conversationId;
    console.log("Opening conversation:", conversationId);

    // Join socket room
    if (socket) {
      socket.emit("join_conversation", conversationId);
    }

    // Show chat view
    document.getElementById("conversations-container").classList.add("hidden");
    document.getElementById("chat-view").classList.remove("hidden");

    // Load chat data
    loadChat(conversationId);

    // Start polling for new messages as fallback (in case socket fails)
    startMessagePolling(conversationId);
  }

  function startMessagePolling(conversationId) {
    // Clear existing polling
    if (messagePollingInterval) {
      clearInterval(messagePollingInterval);
    }

    // Poll every 5 seconds for new messages
    messagePollingInterval = setInterval(async () => {
      if (currentConversationId && isPageVisible) {
        try {
          const response = await fetch(
            `/appointments/chat/${conversationId}/messages`,
            {
              credentials: "same-origin",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (response.ok) {
            const data = await response.json();
            if (data.success && data.messages) {
              const newMessages = data.messages.filter(
                (msg) => !messages.some((existing) => existing.id === msg.id)
              );

              if (newMessages.length > 0) {
                console.log(
                  "Found new messages via polling:",
                  newMessages.length
                );
                messages.push(...newMessages);
                displayMessages();

                // Scroll to bottom
                const container = document.getElementById("messages-container");
                if (container) {
                  setTimeout(() => {
                    container.scrollTop = container.scrollHeight;
                  }, 100);
                }
              }
            }
          }
        } catch (error) {
          console.error("Error polling for messages:", error);
        }
      }
    }, 5000);
  }

  async function loadChat(conversationId) {
    console.log("Loading chat for conversation:", conversationId);
    const loadingElement = document.getElementById("chat-loading");
    if (loadingElement) loadingElement.style.display = "block";

    try {
      // EVERYONE uses the same endpoint - no special routing needed
      const endpoint = `/appointments/chat/${conversationId}/messages`;
      console.log("Fetching from endpoint:", endpoint);

      const response = await fetch(endpoint, {
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      });

      console.log("Response status:", response.status);
      const responseText = await response.text();
      console.log("Response text:", responseText);

      if (!response.ok) {
        throw new Error(
          `HTTP error! status: ${response.status}, message: ${responseText}`
        );
      }

      const data = JSON.parse(responseText);
      console.log("Chat data received:", data);

      if (data.success) {
        messages = data.messages || [];
        lastMessageCount = messages.length;
        console.log("Loaded messages:", messages.length);
        console.log("Messages array:", messages);

        // Set other user info based on conversation data
        const conv = data.conversation;
        console.log("Conversation data:", conv);

        // Determine if this is an admin conversation based on the conversation data
        const isAdminConversation =
          conv &&
          (conv.conversation_type === "admin" ||
            conv.participant_role === "admin" ||
            conv.admin_id !== null ||
            conv.participant_type === "admin");

        console.log("Is admin conversation:", isAdminConversation);

        if (isAdminConversation) {
          if (userRole === "admin") {
            otherUser = {
              id: conv.participant_id,
              name: conv.participant_name || "User",
              role: conv.participant_role || "user",
              image: conv.participant_image,
              specialty:
                conv.participant_role === "therapist" ? "Therapist" : "Patient",
            };
          } else {
            otherUser = {
              id: conv.admin_id || "admin",
              name: "Admin Support",
              role: "admin",
              image: null,
              specialty: "CalmTunes Admin",
            };
          }
        } else {
          // Regular conversation
          if (userRole === "patient") {
            otherUser = {
              id: conv.therapist_id,
              name: conv.therapist_name || "Therapist",
              role: "therapist",
              image: conv.therapist_image,
              specialty: conv.specialty || "General Practice",
            };
          } else {
            otherUser = {
              id: conv.patient_id,
              name: conv.patient_name || "Patient",
              role: "patient",
              image: conv.patient_image,
              specialty: null,
            };
          }
        }

        console.log("Other user set to:", otherUser);

        displayChatHeader();
        displayMessages();

        // Show message input
        const messageForm = document.getElementById("message-form");
        if (messageForm) {
          messageForm.classList.remove("hidden");
        }

        // Show admin action buttons if admin
        if (userRole === "admin") {
          if (otherUser.role === "patient") {
            const patientConcernBtn = document.getElementById(
              "patient-concern-btn"
            );
            if (patientConcernBtn) patientConcernBtn.classList.remove("hidden");
          }
          if (otherUser.role === "therapist") {
            const therapistContractBtn = document.getElementById(
              "therapist-contract-btn"
            );
            if (therapistContractBtn)
              therapistContractBtn.classList.remove("hidden");
          }
        }
      } else {
        console.error("Failed to load chat:", data.error);
        if (loadingElement) {
          loadingElement.innerHTML = `<p class="text-red-500">Failed to load messages: ${data.error}</p>`;
        }
      }
    } catch (error) {
      console.error("Error loading chat:", error);
      if (loadingElement) {
        loadingElement.innerHTML = `<p class="text-red-500">Error loading messages: ${error.message}</p>`;
      }
    } finally {
      if (loadingElement) loadingElement.style.display = "none";
    }
  }

  function displayChatHeader() {
    const header = document.getElementById("chat-header");
    if (!header) return;

    const isAdminConversation =
      otherUser.role === "admin" || otherUser.specialty === "CalmTunes Admin";

    let imageHtml = "";
    if (otherUser.image) {
      const imageUrl = otherUser.image.startsWith("/")
        ? otherUser.image
        : `/uploads/${otherUser.image}`;
      imageHtml = `<img src="${imageUrl}" alt="${otherUser.name}" class="w-10 h-10 rounded-full object-cover mr-3">`;
    } else {
      const bgClass = isAdminConversation
        ? "from-blue-500 to-purple-600"
        : "from-blue-400 to-purple-500";
      const iconClass = isAdminConversation ? "fas fa-headset" : "";

      imageHtml = `<div class="w-10 h-10 bg-gradient-to-br ${bgClass} rounded-full flex items-center justify-center mr-3">
      ${
        isAdminConversation
          ? `<i class="${iconClass} text-white text-sm"></i>`
          : `<span class="text-white font-semibold text-sm">${otherUser.name
              .charAt(0)
              .toUpperCase()}</span>`
      }
    </div>`;
    }

    header.innerHTML = `
    ${imageHtml}
    <div>
      <h3 class="font-semibold text-textMain">${escapeHtml(otherUser.name)}</h3>
      ${
        otherUser.specialty
          ? `<p class="text-sm text-gray-500">${escapeHtml(
              otherUser.specialty
            )}</p>`
          : ""
      }
      ${
        isAdminConversation
          ? '<p class="text-xs text-blue-600 font-medium">Admin Support</p>'
          : ""
      }
    </div>
  `;
  }

  function displayMessages() {
    const container = document.getElementById("messages-container");
    if (!container) {
      console.error("Messages container not found");
      return;
    }

    console.log("Displaying messages:", messages.length);
    console.log("Messages data:", messages);

    if (messages.length === 0) {
      console.log("No messages to display");
      container.innerHTML = `
      <div class="text-center text-gray-900 py-8">
        <i class="fas fa-comments text-4xl mb-2 text-gray-400"></i>
        <p class="text-gray-900">No messages yet. Start the conversation!</p>
      </div>
    `;
      return;
    }

    console.log("Rendering messages...");
    const messagesHtml = messages
      .map((msg, index) => {
        console.log("Rendering message:", index, msg);

        if (!msg || !msg.content) {
          console.log("Skipping invalid message:", msg);
          return "";
        }

        const isOwn = msg.sender_id == currentUserId;
        const time = msg.created_at
          ? new Date(msg.created_at).toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            })
          : new Date().toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            });

        const alignClass = isOwn ? "justify-end" : "justify-start";
        const bubbleClass = isOwn
          ? "bg-primary text-white ml-auto"
          : "bg-white border ml-0";

        // Add sender indicator for admin messages
        const isAdminSender = msg.sender_role === "admin";
        let senderIndicator = "";
        if (!isOwn && isAdminSender) {
          senderIndicator = `
        <div class="flex items-center mb-1">
          <i class="fas fa-user-shield text-blue-600 mr-2 text-xs"></i>
          <span class="text-xs font-medium text-blue-600">Admin</span>
        </div>
      `;
        }

        return `
      <div class="flex ${alignClass} mb-4">
        <div class="${bubbleClass} max-w-xs lg:max-w-md px-4 py-2 rounded-lg shadow-sm">
          ${senderIndicator}
          <p class="text-sm">${escapeHtml(msg.content || "No content")}</p>
          <p class="text-xs ${
            isOwn ? "text-primary/70" : "text-gray-500"
          } mt-1">${time}</p>
        </div>
      </div>
    `;
      })
      .join("");

    console.log("Generated HTML:", messagesHtml);
    container.innerHTML = messagesHtml;

    // Scroll to bottom to show latest messages
    setTimeout(() => {
      container.scrollTop = container.scrollHeight;
      console.log("Scrolled to bottom");
    }, 100);
  }

  async function sendMessage(event) {
    event.preventDefault();

    const input = document.getElementById("message-input");
    const sendBtn = document.getElementById("send-btn");
    const content = input.value.trim();

    if (!content) return;

    if (!currentConversationId) {
      showToast("No conversation selected", "error");
      return;
    }

    console.log("Sending message:", {
      conversationId: currentConversationId,
      content: content.substring(0, 50),
    });

    // Disable input while sending
    input.disabled = true;
    sendBtn.disabled = true;
    sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

    try {
      // Use the same endpoint for everyone - no special routing
      const response = await fetch(
        `/appointments/chat/${currentConversationId}/send`,
        {
          method: "POST",
          credentials: "same-origin",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ content }),
        }
      );

      console.log("Send response status:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Send failed:", response.status, errorText);
        throw new Error(`Failed to send message (${response.status})`);
      }

      const data = await response.json();
      console.log("Send response data:", data);

      if (data.success) {
        // Add message locally for immediate feedback
        const newMessage = {
          id: data.message.id,
          conversation_id: currentConversationId,
          sender_id: currentUserId,
          content: content,
          created_at: data.message.created_at || new Date().toISOString(),
          sender_role: userRole,
          sender_name: "<%= user.name %>",
        };

        messages.push(newMessage);
        displayMessages();

        // Emit via socket for real-time updates
        if (socket && socket.connected) {
          socket.emit("new_message", {
            conversationId: currentConversationId,
            message: newMessage,
          });
        }

        input.value = "";
        console.log("Message sent successfully");
      } else {
        console.error("Failed to send message:", data.error);
        showToast(data.error || "Failed to send message", "error");
      }
    } catch (error) {
      console.error("Error sending message:", error);
      showToast("Failed to send message: " + error.message, "error");
    } finally {
      // Re-enable input
      input.disabled = false;
      sendBtn.disabled = false;
      sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
    }
  }

  function backToConversations() {
    currentConversationId = null;

    // Stop message polling
    if (messagePollingInterval) {
      clearInterval(messagePollingInterval);
      messagePollingInterval = null;
    }

    // Leave socket room
    if (socket) {
      socket.emit("leave_conversation", currentConversationId);
    }

    // Hide chat view and show conversations
    document.getElementById("chat-view").classList.add("hidden");
    document
      .getElementById("conversations-container")
      .classList.remove("hidden");

    // Hide admin action buttons
    document.getElementById("patient-concern-btn").classList.add("hidden");
    document.getElementById("therapist-contract-btn").classList.add("hidden");

    // Refresh conversations
    loadConversations();
  }

  async function closeConversation() {
    if (!currentConversationId) return;

    const reason = prompt("Reason for closing conversation (optional):");

    try {
      // Use appropriate endpoint based on user role and conversation type
      let endpoint;
      if (userRole === "admin") {
        endpoint = `/admin/close-conversation/${currentConversationId}`;
      } else {
        // Patients and therapists use the same endpoint
        endpoint = `/appointments/chat/${currentConversationId}/close`;
      }

      const response = await fetch(endpoint, {
        method: "POST",
        credentials: "same-origin",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          reason: reason || "Conversation closed",
        }),
      });

      const data = await response.json();

      if (data.success) {
        showToast("Conversation closed successfully");
        backToConversations();
      } else {
        showToast(data.error || "Failed to close conversation", "error");
      }
    } catch (error) {
      console.error("Error closing conversation:", error);
      showToast("Failed to close conversation", "error");
    }
  }

  function refreshConversations() {
    loadConversations();
    showToast("Conversations refreshed");
  }

  function refreshMessages() {
    if (currentConversationId) {
      console.log(
        "Manually refreshing messages for conversation:",
        currentConversationId
      );
      loadChat(currentConversationId);
      showToast("Messages refreshed");
    } else {
      showToast("No conversation selected", "error");
    }
  }

  function showNoConversations() {
    const container = document.getElementById("conversations-list");
    const noConversations = document.getElementById("no-conversations");

    container.innerHTML = "";
    noConversations.classList.remove("hidden");
  }

  function handleTyping() {
    if (socket && currentConversationId) {
      socket.emit("typing", {
        conversationId: currentConversationId,
        userId: currentUserId,
        userName: userRole === "admin" ? "Admin" : "User",
      });

      clearTimeout(typingTimer);
      typingTimer = setTimeout(() => {
        socket.emit("stop_typing", {
          conversationId: currentConversationId,
          userId: currentUserId,
        });
      }, 1000);
    }
  }

  function showTypingIndicator(userName) {
    const indicator = document.getElementById("typing-indicator");
    const userEl = document.getElementById("typing-user");

    if (indicator && userEl) {
      userEl.textContent = userName;
      indicator.classList.remove("hidden");
    }
  }

  function hideTypingIndicator() {
    const indicator = document.getElementById("typing-indicator");
    if (indicator) {
      indicator.classList.add("hidden");
    }
  }

  // Enhanced toast function with different types
  function showToast(message, type = "success") {
    const toast = document.getElementById("toast-notification");
    const messageEl = document.getElementById("toast-message");

    // Update toast styling based on type
    const bgClass = type === "error" ? "bg-red-500" : "bg-green-500";
    const iconClass =
      type === "error" ? "fas fa-exclamation-circle" : "fas fa-check-circle";

    toast.className = `fixed top-4 right-4 ${bgClass} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`;

    const icon = toast.querySelector("i");
    icon.className = `${iconClass} mr-2`;

    messageEl.textContent = message;
    toast.classList.remove("hidden");

    setTimeout(() => {
      toast.classList.add("hidden");
    }, 4000);
  }

  // Therapist chat mode switching functions
  let currentChatMode = "patient"; // 'patient' or 'admin'

  function switchToPatientChat() {
    currentChatMode = "patient";

    // Update button styles
    document
      .getElementById("patient-chat-btn")
      .classList.remove("btn-secondary");
    document.getElementById("patient-chat-btn").classList.add("btn-primary");
    document.getElementById("admin-chat-btn").classList.remove("btn-primary");
    document.getElementById("admin-chat-btn").classList.add("btn-secondary");

    // Update page title and description
    document.querySelector("h1").innerHTML = "ðŸ’¬ Patient Conversations";
    document.querySelector(".text-xl").textContent =
      "Chat with your patients and manage your practice conversations";

    // Reload conversations for patient chat mode
    loadConversationsForMode("patient");

    showToast("Switched to Patient Chat Mode");
  }

  function switchToAdminChat() {
    currentChatMode = "admin";

    // Update button styles
    document.getElementById("admin-chat-btn").classList.remove("btn-secondary");
    document.getElementById("admin-chat-btn").classList.add("btn-primary");
    document.getElementById("patient-chat-btn").classList.remove("btn-primary");
    document.getElementById("patient-chat-btn").classList.add("btn-secondary");

    // Update page title and description
    document.querySelector("h1").innerHTML = "ðŸ’¬ Admin Support";
    document.querySelector(".text-xl").textContent =
      "Contact admin support for assistance with your therapist account and practice";

    // Load admin conversations
    loadConversationsForMode("admin");

    showToast("Switched to Admin Chat Mode");
  }

  // Load conversations based on mode
  async function loadConversationsForMode(mode) {
    try {
      let endpoint;
      if (mode === "admin") {
        endpoint = "/therapist/api/admin-conversations";
      } else {
        endpoint = "/appointments/chat/conversations";
      }

      const response = await fetch(endpoint, {
        credentials: "same-origin",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const data = await response.json();

      if (data.success) {
        conversations = data.conversations || [];
        displayConversationsForMode(mode);
      } else {
        console.error("Failed to load conversations:", data.error);
        showNoConversations();
      }
    } catch (error) {
      console.error("Error loading conversations:", error);
      showNoConversations();
    }
  }

  // Display conversations with mode-specific styling
  function displayConversationsForMode(mode) {
    const container = document.getElementById("conversations-list");
    const noConversations = document.getElementById("no-conversations");

    if (!conversations || conversations.length === 0) {
      container.innerHTML = "";
      noConversations.classList.remove("hidden");
      return;
    }

    noConversations.classList.add("hidden");

    container.innerHTML = conversations
      .map((conversation) => {
        const isAdmin =
          mode === "admin" || conversation.conversation_type === "admin";

        // Determine other user based on conversation type and current user role
        let otherUser;
        if (isAdmin) {
          otherUser = {
            name: "Admin Support",
            image: null,
            role: "admin",
            specialty: "CalmTunes Admin Team",
          };
        } else {
          // Regular patient-therapist conversation
          if (userRole === "patient") {
            otherUser = {
              name: conversation.therapist_name || "Therapist",
              image: conversation.therapist_image,
              role: "therapist",
              specialty: conversation.specialty || "General Practice",
            };
          } else {
            otherUser = {
              name: conversation.patient_name || "Patient",
              image: conversation.patient_image,
              role: "patient",
              specialty: "Patient",
            };
          }
        }

        const imageUrl =
          otherUser.image && !otherUser.image.startsWith("http")
            ? `/uploads/${otherUser.image}`
            : otherUser.image;

        const lastMessageTime = conversation.last_message_time
          ? formatMessageTime(conversation.last_message_time)
          : formatMessageTime(conversation.created_at);

        const unreadCount = parseInt(conversation.unread_count) || 0;

        // Admin conversation badge
        const adminBadge = isAdmin
          ? '<span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full ml-2"><i class="fas fa-headset mr-1"></i>Support</span>'
          : "";

        return `
      <div class="p-6 hover:bg-gray-50 cursor-pointer transition-colors border-l-4 ${
        isAdmin ? "border-blue-500 bg-blue-50/30" : "border-transparent"
      }"
           onclick="openConversation('${conversation.id}')">
        <div class="flex items-center justify-between">
          <div class="flex items-center flex-1">
            ${
              imageUrl
                ? `<img src="${imageUrl}" alt="${otherUser.name}" class="w-12 h-12 rounded-full object-cover mr-4">`
                : `<div class="w-12 h-12 bg-gradient-to-br ${
                    isAdmin
                      ? "from-blue-500 to-purple-600"
                      : "from-blue-400 to-purple-500"
                  } rounded-full flex items-center justify-center mr-4">
                ${
                  isAdmin
                    ? '<i class="fas fa-headset text-white"></i>'
                    : `<span class="text-white font-semibold">${otherUser.name
                        .charAt(0)
                        .toUpperCase()}</span>`
                }
              </div>`
            }
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <h3 class="font-semibold text-textMain truncate">${escapeHtml(
                    otherUser.name
                  )}</h3>
                  ${adminBadge}
                </div>
                <div class="flex items-center space-x-2 ml-2">
                  ${
                    unreadCount > 0
                      ? `<span class="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                      ${unreadCount > 99 ? "99+" : unreadCount}
                    </span>`
                      : ""
                  }
                  <span class="text-sm text-gray-500">${lastMessageTime}</span>
                </div>
              </div>
              ${
                otherUser.specialty
                  ? `<p class="text-sm ${
                      isAdmin ? "text-blue-600" : "text-gray-500"
                    } mb-1">${escapeHtml(otherUser.specialty)}</p>`
                  : ""
              }
              <p class="text-gray-600 truncate">
                ${conversation.last_message || "No messages yet"}
              </p>
            </div>
          </div>
          <div class="ml-4">
            <i class="fas fa-chevron-right text-gray-400"></i>
          </div>
        </div>
      </div>
    `;
      })
      .join("");
  }

  // Initialize chat mode for therapists
  document.addEventListener("DOMContentLoaded", function () {
    // Check if we're in therapist mode and set up chat mode switching
    const userRole = "<%= user && user.role %>";
    if (userRole === "therapist") {
      // Set initial state for therapist chat mode buttons
      const patientBtn = document.getElementById("patient-chat-btn");
      const adminBtn = document.getElementById("admin-chat-btn");

      if (patientBtn && adminBtn) {
        patientBtn.classList.add("btn-primary");
        adminBtn.classList.add("btn-secondary");
      }

      // Override the loadConversations function for therapists
      const originalLoadConversations = loadConversations;
      loadConversations = function () {
        loadConversationsForMode(currentChatMode);
      };
    }
  });
</script>
